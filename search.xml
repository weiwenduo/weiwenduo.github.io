<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记录：在外远程访问家里PC上的WSL</title>
      <link href="/2022/12/07/%E8%AE%B0%E5%BD%95%EF%BC%9A%E5%9C%A8%E5%AE%B6%E9%87%8CPC%E4%B8%8A%E5%AE%89%E8%A3%85WSL%E5%B9%B6%E6%94%AF%E6%8C%81%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
      <url>/2022/12/07/%E8%AE%B0%E5%BD%95%EF%BC%9A%E5%9C%A8%E5%AE%B6%E9%87%8CPC%E4%B8%8A%E5%AE%89%E8%A3%85WSL%E5%B9%B6%E6%94%AF%E6%8C%81%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>家里有台DeskMini一直闲置，为了让其发挥作用，决定将其作为一台家庭服务器使用。原本安装的是Windows11，但是如果作为服务器使用，Linux还是更加顺手一些。于是就决定动动小手搞一搞。</p><p>前提条件：</p><ul><li>Windows PC一台</li><li>可以做端口转发的路由器一台</li><li>公网IP一个（没有的话要搞一下内网穿透，详情百度）</li></ul><h3 id="2-操作步骤"><a href="#2-操作步骤" class="headerlink" title="2. 操作步骤"></a>2. 操作步骤</h3><h4 id="2-1-安装配置WSL"><a href="#2-1-安装配置WSL" class="headerlink" title="2.1 安装配置WSL"></a>2.1 安装配置WSL</h4><h4 id="2-1-1-安装"><a href="#2-1-1-安装" class="headerlink" title="2.1.1 安装"></a>2.1.1 安装</h4><p>在<strong>Mircosoft Store</strong>搜索<strong>Ubuntu</strong>（这里我选择的是Ubuntu，你也可以自己选择其他的Linux发行版），点击安装等待安装完成即可。若出现问题，可以前往 <a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">https://learn.microsoft.com/zh-cn/windows/wsl/install</a> 查询相关资料，也可以手动安装，自由选择。</p><h4 id="2-1-2-配置"><a href="#2-1-2-配置" class="headerlink" title="2.1.2 配置"></a>2.1.2 配置</h4><p>打开CMD或PowerShell，设置WSL默认用户后进入WSL。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置默认用户为root </span></span><br><span class="line">ubuntu config <span class="literal">--default-user</span> root</span><br><span class="line"><span class="comment"># 进入WSL</span></span><br><span class="line">ubuntu</span><br></pre></td></tr></table></figure><p>配置root密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置root用户密码</span></span><br><span class="line">passwd root</span><br></pre></td></tr></table></figure><p>安装OpenSSH</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install openssh</span><br></pre></td></tr></table></figure><p>配置OpenSSH</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置地址和监听端口，0.0.0.0代表所有的地址</span></span><br><span class="line">Port 22</span><br><span class="line">ListenAddress 0.0.0.0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许root用户登录</span></span><br><span class="line">PermitRootLogin yes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许密码认证</span></span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><p>启用SSH服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service ssh start</span><br></pre></td></tr></table></figure><h4 id="2-2-宿主机设置端口转发与防火墙规则"><a href="#2-2-宿主机设置端口转发与防火墙规则" class="headerlink" title="2.2 宿主机设置端口转发与防火墙规则"></a>2.2 宿主机设置端口转发与防火墙规则</h4><p>查询WSL的ip地址</p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2022/12/07/1670395129457.png"></p><p>PS: 若<strong>ifconfig</strong>无此命令，则需要安装<strong>net-tools</strong>软件包。</p><p>配置宿主机</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口转发</span></span><br><span class="line">netsh interface portproxy add v4tov4 listenaddress=<span class="number">0.0</span>.<span class="number">0.0</span> listenport=<span class="variable">$listenport</span> connectaddress=<span class="variable">$wslIp</span> connectport=<span class="variable">$connectport</span></span><br><span class="line"><span class="comment"># 设置防火墙规则</span></span><br><span class="line">netsh advfirewall firewall add rule name=<span class="variable">$ruleName</span> <span class="built_in">dir</span>=<span class="keyword">in</span> action=allow protocol=TCP localport=<span class="variable">$port</span></span><br></pre></td></tr></table></figure><h4 id="2-3-配置路由器端口转发"><a href="#2-3-配置路由器端口转发" class="headerlink" title="2.3 配置路由器端口转发"></a>2.3 配置路由器端口转发</h4><p>此处省略，有需要请自行百度。</p><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="3 测试"></a>3 测试</h3><p>找一台外网的机器，连接测试一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@ip -p22</span><br></pre></td></tr></table></figure><p>看到如下内容就代表成功了。接下来就可以做你想做的事了。</p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2022/12/07/1670397363957.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录：IDEA因端口占用无法启动的问题解决</title>
      <link href="/2022/06/23/%E8%AE%B0%E5%BD%95%EF%BC%9AIDEA%E5%9B%A0%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2022/06/23/%E8%AE%B0%E5%BD%95%EF%BC%9AIDEA%E5%9B%A0%E7%AB%AF%E5%8F%A3%E5%8D%A0%E7%94%A8%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Windows 11 22H2<br>IntelliJ IDEA 2022.1.3<br>Docker Desktop for Windows 4.8.2</p><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>打开IDEA准备开始工作时，IDEA启动失败，抛出了一个异常。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Internal error. Please refer to http://jb.gg/ide/critical-startup-errors</span><br><span class="line"></span><br><span class="line">java.util.concurrent.CompletionException: java.net.BindException: Address already in use: bind</span><br><span class="line">    at java.base/java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:314)</span><br><span class="line">    at java.base/java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:319)</span><br><span class="line">    at java.base/java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1702)</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)</span><br><span class="line">    at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)</span><br><span class="line">    at java.base/java.lang.Thread.run(Thread.java:834)</span><br><span class="line">Caused by: java.net.BindException: Address already in use: bind</span><br><span class="line">    at java.base/sun.nio.ch.Net.bind0(Native Method)</span><br><span class="line">    at java.base/sun.nio.ch.Net.bind(Net.java:455)</span><br><span class="line">    at java.base/sun.nio.ch.Net.bind(Net.java:447)</span><br><span class="line">    at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:227)</span><br><span class="line">    at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:132)</span><br><span class="line">    at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:551)</span><br><span class="line">    at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1346)</span><br><span class="line">    at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:503)</span><br><span class="line">    at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:488)</span><br><span class="line">    at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:985)</span><br><span class="line">    at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:247)</span><br><span class="line">    at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:344)</span><br><span class="line">    at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)</span><br><span class="line">    at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:510)</span><br><span class="line">    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:518)</span><br><span class="line">    at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1044)</span><br><span class="line">    at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)</span><br><span class="line">    at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)</span><br><span class="line">    ... 1 more</span><br><span class="line"></span><br><span class="line">-----</span><br><span class="line">JRE 11.0.5+10-b520.30 amd64 by JetBrains s.r.o</span><br></pre></td></tr></table></figure><p>异常显示，IDEA运行需要的服务端端口被占用，导致无法启动。</p><h2 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h2><p>IDEA启动时，会启动一个本地的服务端，需要申请一个端口号使用。端口号申请规则是从6942到6991，取第一个可用的端口。既然这样，那就先查询6942是否被其他程序占用了。</p><ol><li>查询端口号是否被占用</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -ano | findstr 6942</span><br></pre></td></tr></table></figure><p>发现没有程序占用。</p><ol start="2"><li>查询端口号是否被系统预留给了其他程序</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface ipv4 show excludedportrange protocol=tcp</span><br></pre></td></tr></table></figure><p>查看结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">协议 tcp 端口排除范围</span><br><span class="line"></span><br><span class="line">开始端口    结束端口</span><br><span class="line">----------    --------</span><br><span class="line">...</span><br><span class="line">      6900        6949</span><br><span class="line">      6950        6999</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">* - 管理的端口排除。</span><br></pre></td></tr></table></figure><p>这时可以看到，端口被系统排除掉不能使用。</p><p>这其中涉及到Windows10以上版本的系统中的<strong>受管端口排除</strong>。在启用Hyper-V之后，系统会申请一部分端口留用。正巧在问题出现以前，我手贱更新了Docker Desktop（运行时需要Hyper-V支持）。</p><h2 id="解决思路和步骤"><a href="#解决思路和步骤" class="headerlink" title="解决思路和步骤"></a>解决思路和步骤</h2><p>受管端口是可以用户自定义的。既然Hyper-V会申请保留一部分端口，那就在Hyper-V占用之前，自定义保留所需要的端口，保证IDEA在申请端口的时候，可以顺利申请到。</p><p>确定思路就开始行动。</p><h3 id="1-关闭Hyper-V"><a href="#1-关闭Hyper-V" class="headerlink" title="1. 关闭Hyper-V"></a>1. 关闭Hyper-V</h3><p>管理员身份运行PowerShell，运行以下命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Disable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All</span><br></pre></td></tr></table></figure><p>运行之后重启系统。</p><h3 id="2-保留IDEA需要的端口"><a href="#2-保留IDEA需要的端口" class="headerlink" title="2. 保留IDEA需要的端口"></a>2. 保留IDEA需要的端口</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh int ipv4 add excludedportrange protocol=tcp startport=6942 numberofports=50</span><br></pre></td></tr></table></figure><h3 id="3-启动Hyper-V"><a href="#3-启动Hyper-V" class="headerlink" title="3. 启动Hyper-V"></a>3. 启动Hyper-V</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All</span><br></pre></td></tr></table></figure><p>重启系统之后，IDEA就可以运行了。</p><p>查看受管端口排除列表，可以看到自定义规则已经生效了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">协议 tcp 端口排除范围</span><br><span class="line"></span><br><span class="line">开始端口    结束端口</span><br><span class="line">----------    --------</span><br><span class="line">...</span><br><span class="line">      5426        5426</span><br><span class="line">      6942        6991     *</span><br><span class="line">...</span><br><span class="line">      9281        9380</span><br><span class="line">     50000       50059     *</span><br><span class="line"></span><br><span class="line">* - 管理的端口排除。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录：自己实现一个DDNS客户端</title>
      <link href="/2021/12/16/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AADDNS%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2021/12/16/%E8%AE%B0%E5%BD%95%EF%BC%9A%E8%87%AA%E5%B7%B1%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AADDNS%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h2><p>前阵子被种草了群晖的NAS，心水已久，终于等到打折，狠下心入手了一台DS920。它能满足很多对私有云的需求，例如云盘&#x2F;云笔记&#x2F;云相册&#x2F;离线下载&#x2F;自建流媒体服务器等等。DSM系统用起来很方便，但有时工作需要从外网访问NAS，如果使用群晖提供的QuickConnect，速度很是令人堪忧。于是就有了外网直连访问家里NAS的想法。想法实现的其中一环，就是DDNS。</p><p>群晖DSM中自带了DDNS客户端，但是不支持更新泛域名的记录值。其他也有很多开源的DDNS客户端，直接用即可。不过想着最近在学习Kotlin和Vert.x，这是一个实践的好机会，于是就有了今天的这篇记录。</p><h2 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2. 实现思路"></a>2. 实现思路</h2><h3 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1 准备工作"></a>2.1 准备工作</h3><ul><li>一枚域名</li><li>一枚公网IP</li><li>一台电脑</li></ul><h3 id="2-2-需要实现的基础功能"><a href="#2-2-需要实现的基础功能" class="headerlink" title="2.2 需要实现的基础功能"></a>2.2 需要实现的基础功能</h3><ul><li>对接DNSPod运营商</li><li>更新DNS解析的记录值</li><li>计划任务</li><li>提供Docker镜像方便部署</li></ul><h2 id="3-开动"><a href="#3-开动" class="headerlink" title="3. 开动"></a>3. 开动</h2><h3 id="3-1-新建工程"><a href="#3-1-新建工程" class="headerlink" title="3.1 新建工程"></a>3.1 新建工程</h3><p>使用<strong>Vert.x</strong>提供的 [App Generator]: <a href="https://start.vertx.io/">https://start.vertx.io/</a> 创建一个工程。导入我们需要用到的工具包。以下是项目的依赖情况。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;com.fasterxml.jackson.module:jackson-module-kotlin:2.13.0&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;io.vertx:vertx-web:<span class="variable">$vertxVersion</span>&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;io.vertx:vertx-lang-kotlin:<span class="variable">$vertxVersion</span>&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;com.tencentcloudapi:tencentcloud-sdk-java-dnspod:<span class="variable">$tencentcloudVersion</span>&quot;</span>)</span><br><span class="line">    implementation(<span class="string">&quot;ch.qos.logback:logback-classic:<span class="variable">$logbackVersion</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-实现获取公网IP函数"><a href="#3-2-实现获取公网IP函数" class="headerlink" title="3.2 实现获取公网IP函数"></a>3.2 实现获取公网IP函数</h3><p>有两种方式可以获得公网IP。</p><ul><li><p>从本地网卡获取。</p></li><li><p>调用公开的获取公网IP接口。</p></li></ul><p>由于家庭宽带网络环境复杂，从网卡可能会无法获取或不准确。所以此处我们选择后者。以下是部分代码片段。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 搜狐获取公网IP接口URL</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> SOHU_GET_IP_URL = <span class="string">&quot;http://pv.sohu.com/cityjson?ie=utf-8&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用搜狐接口获取公网IP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getIp</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">    <span class="keyword">val</span> request = HttpRequest.newBuilder(URI(SOHU_GET_IP_URL)).build()</span><br><span class="line">    <span class="keyword">val</span> response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString())</span><br><span class="line">    <span class="keyword">var</span> responseBody = response.body()</span><br><span class="line">    responseBody = responseBody.substring(responseBody.indexOf(<span class="string">&quot;&#123;&quot;</span>), responseBody.lastIndexOf(<span class="string">&quot;&#125;&quot;</span>) + <span class="number">1</span>)</span><br><span class="line">    log.info(<span class="string">&quot;当前公网IP =&gt; <span class="variable">$responseBody</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> JsonObject(responseBody).getString(<span class="string">&quot;cip&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-定义配置类"><a href="#3-3-定义配置类" class="headerlink" title="3.3 定义配置类"></a>3.3 定义配置类</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Config &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log: Logger = LoggerFactory.getLogger(<span class="keyword">this</span>.javaClass)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认配置文件名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> DEFAULT_CONFIG_FILE_NAME = <span class="string">&quot;config.json&quot;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 外部配置文件默认路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> DEFAULT_EXTERNAL_CONFIG_FILE_URI = <span class="string">&quot;/config/config.json&quot;</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置参数对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> properties : ConfigProperties</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载配置文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="comment">//读取默认配置文件</span></span><br><span class="line">        <span class="keyword">val</span> internalSource = ClassLoader.getSystemResourceAsStream(DEFAULT_CONFIG_FILE_NAME)</span><br><span class="line">        <span class="keyword">val</span> configMap: HashMap&lt;String, Any&gt; =</span><br><span class="line">            objectMapper.readValue(internalSource, jacksonTypeRef&lt;HashMap&lt;String, Any&gt;&gt;())</span><br><span class="line">        <span class="comment">//读取外部配置文件</span></span><br><span class="line">        <span class="keyword">val</span> externalSource = File(DEFAULT_EXTERNAL_CONFIG_FILE_URI)</span><br><span class="line">        <span class="keyword">if</span> (externalSource.exists() &amp;&amp; externalSource.isFile) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;加载外部配置文件&quot;</span>)</span><br><span class="line">            <span class="keyword">val</span> externalProperties =</span><br><span class="line">                objectMapper.readValue(externalSource, jacksonTypeRef&lt;HashMap&lt;String, Any&gt;&gt;())</span><br><span class="line">            configMap.putAll(externalProperties)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> configJson = objectMapper.writeValueAsString(configMap)</span><br><span class="line">        properties = objectMapper.readValue(configJson, jacksonTypeRef&lt;ConfigProperties&gt;())</span><br><span class="line">        log.info(<span class="string">&quot;Config load success!  =&gt; <span class="variable">$configJson</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getProperties</span><span class="params">()</span></span>: ConfigProperties = properties</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type 域名服务商</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> schedule 计划任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> api 域名服务商详细配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">ConfigProperties</span>(</span><br><span class="line">    <span class="keyword">var</span> type: TypeEnum,</span><br><span class="line">    <span class="keyword">var</span> schedule: ScheduleProperties,</span><br><span class="line">    <span class="keyword">var</span> api: APIProperties</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计划任务配置</span></span><br><span class="line"><span class="comment"> * 默认开启，5分钟执行一次</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> enabled 开启状态，默认开启。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> interval 计划任务时间间隔，单位秒。默认300。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">ScheduleProperties</span>(</span><br><span class="line">    <span class="keyword">var</span> enabled: <span class="built_in">Boolean</span> = <span class="literal">true</span>,</span><br><span class="line">    <span class="keyword">var</span> interval: <span class="built_in">Long</span> = <span class="number">300</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dnspod DNSPod配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">APIProperties</span>(</span><br><span class="line">    <span class="keyword">var</span> dnspod: DNSPodProperties</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DNSPod配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> secretId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> secretKey</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> domain</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Serializable</span></span><br><span class="line"><span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">DNSPodProperties</span>(</span><br><span class="line">    <span class="keyword">var</span> secretId: String,</span><br><span class="line">    <span class="keyword">var</span> secretKey: String,</span><br><span class="line">    <span class="keyword">var</span> domain: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>配置文件则如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DNSPod&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;schedule&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;interval&quot;</span><span class="punctuation">:</span> <span class="number">300</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;api&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;dnspod&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;secretId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;secretKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxxxxxxxxxxxxxxxxxxx&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;domain&quot;</span><span class="punctuation">:</span> <span class="string">&quot;xxxxx.xxx&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-对接DNSPod的API"><a href="#3-4-对接DNSPod的API" class="headerlink" title="3.4 对接DNSPod的API"></a>3.4 对接DNSPod的API</h3><p>对接DNSPod的SDK，并且预留对接其他运营商的接口。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API操作类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">object</span> CloudApiManager &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log: Logger = LoggerFactory.getLogger(<span class="keyword">this</span>.javaClass)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> executor: CloudApi</span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> type = Config.getProperties().type</span><br><span class="line">        <span class="keyword">when</span> (type) &#123;</span><br><span class="line">            NONE -&gt; &#123;</span><br><span class="line">                <span class="keyword">throw</span> RuntimeException(<span class="string">&quot;未指定域名运营商，请设置type参数！&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            DNSPod -&gt; executor = DNSPodApi</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">execute</span><span class="params">()</span></span> = executor.execute()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 域名运营商接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">CloudApi</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">execute</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DNSPod实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">object</span> DNSPodApi : CloudApi &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log: Logger = LoggerFactory.getLogger(<span class="keyword">this</span>.javaClass)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> secretId: String = Config.getProperties().api.dnspod.secretId</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> secretKey: String = Config.getProperties().api.dnspod.secretKey</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> domain: String = Config.getProperties().api.dnspod.domain</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> client: DnspodClient = DnspodClient(</span><br><span class="line">        Credential(secretId, secretKey),</span><br><span class="line">        <span class="string">&quot;&quot;</span>,</span><br><span class="line">        ClientProfile(ClientProfile.SIGN_TC3_256, HttpProfile().also &#123; it.endpoint = <span class="string">&quot;dnspod.tencentcloudapi.com&quot;</span> &#125;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">execute</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">val</span> recordList = getDescribeRecordList().recordList.map &#123; it.recordId &#125;.toTypedArray()</span><br><span class="line">            modifyRecordBatch(recordList)</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;更新失败&quot;</span>, e)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某个域名下的解析记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Throws(TencentCloudSDKException::class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">getDescribeRecordList</span><span class="params">()</span></span>: DescribeRecordListResponse &#123;</span><br><span class="line">        <span class="keyword">val</span> req = DescribeRecordListRequest().also &#123;</span><br><span class="line">            it.domain = domain</span><br><span class="line">            it.recordType = <span class="string">&quot;A&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> client.DescribeRecordList(req)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量修改记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Throws(TencentCloudSDKException::class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">modifyRecordBatch</span><span class="params">(recordIds: <span class="type">Array</span>&lt;<span class="type">Long</span>&gt;)</span></span>: ModifyRecordBatchResponse &#123;</span><br><span class="line">        <span class="keyword">return</span> modifyRecordBatch(recordIds, getIp())</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量修改记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Throws(TencentCloudSDKException::class)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">modifyRecordBatch</span><span class="params">(recordIds: <span class="type">Array</span>&lt;<span class="type">Long</span>&gt;, ip: <span class="type">String</span>)</span></span>: ModifyRecordBatchResponse &#123;</span><br><span class="line">        <span class="keyword">val</span> req = ModifyRecordBatchRequest().also &#123;</span><br><span class="line">            it.recordIdList = recordIds</span><br><span class="line">            it.change = <span class="string">&quot;value&quot;</span></span><br><span class="line">            it.changeTo = ip</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> resp = client.ModifyRecordBatch(req)</span><br><span class="line">        log.info(<span class="string">&quot;修改记录值成功 :: 结果 =&gt; &quot;</span> + ModifyRecordBatchResponse.toJsonString(resp))</span><br><span class="line">        <span class="keyword">return</span> resp</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-实现计划任务"><a href="#3-5-实现计划任务" class="headerlink" title="3.5 实现计划任务"></a>3.5 实现计划任务</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Schedule &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log: Logger = LoggerFactory.getLogger(<span class="keyword">this</span>.javaClass)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> timer: Timer = Timer(<span class="string">&quot;ddnsw-schedule&quot;</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> interval: <span class="built_in">Long</span> = Config.getProperties().schedule.interval</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">        timer.schedule(timerTask &#123; CloudApiManager.execute() &#125;, <span class="number">0</span>, interval)</span><br><span class="line">        log.info(<span class="string">&quot;计划任务启动&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">        timer.cancel()</span><br><span class="line">        log.info(<span class="string">&quot;计划任务停止&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-6-实现RestAPI控制程序"><a href="#3-6-实现RestAPI控制程序" class="headerlink" title="3.6 实现RestAPI控制程序"></a>3.6 实现RestAPI控制程序</h3><p>这一步是提供了Rest的API来控制程序。我们需要实现四个HTTP接口，分别是：开始&#x2F;停止定时任务、查询公网IP和更新DNS解析记录值。以下是Vert.x设置路由和启动HttpServer的部分代码。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MainVerticle</span> : <span class="type">AbstractVerticle</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">(startPromise: <span class="type">Promise</span>&lt;<span class="type">Void</span>&gt;)</span></span> &#123;</span><br><span class="line">        <span class="comment">//路由</span></span><br><span class="line">        <span class="keyword">val</span> router = Router.router(vertx)</span><br><span class="line">        router.route().handler(ResponseContentTypeHandler.create())</span><br><span class="line">        router.<span class="keyword">get</span>(<span class="string">&quot;/ip&quot;</span>).handler(GetIpHandler())</span><br><span class="line">        router.<span class="keyword">get</span>(<span class="string">&quot;/update&quot;</span>).handler(UpdateHandler())</span><br><span class="line">        router.<span class="keyword">get</span>(<span class="string">&quot;/schedule/start&quot;</span>).handler(ScheduleStartHandler())</span><br><span class="line">        router.<span class="keyword">get</span>(<span class="string">&quot;/schedule/stop&quot;</span>).handler(ScheduleStopHandler())</span><br><span class="line">        <span class="comment">//启动服务器</span></span><br><span class="line">        vertx.createHttpServer()</span><br><span class="line">            .requestHandler(router)</span><br><span class="line">            .listen(<span class="number">9090</span>)</span><br><span class="line">            .onSuccess &#123;</span><br><span class="line">                startPromise.complete()</span><br><span class="line">                log.info(<span class="string">&quot;HTTP Server started on port <span class="subst">$&#123;it.actualPort()&#125;</span>&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            .onFailure &#123;</span><br><span class="line">                startPromise.fail(it.cause)</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-打包镜像-x2F-上传到DockerHub"><a href="#3-7-打包镜像-x2F-上传到DockerHub" class="headerlink" title="3.7 打包镜像&#x2F;上传到DockerHub"></a>3.7 打包镜像&#x2F;上传到DockerHub</h3><ul><li>Dockerfile如下</li></ul><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/java/jre:<span class="number">11</span>u13-zulu-alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./build/libs/ddnsw-fat.jar /root</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">9090</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;ddnsw-fat.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><ul><li>打包镜像并上传</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build -t weidajiao/ddnsw:latest .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker push weidajiao/ddnsw:latest</span></span><br></pre></td></tr></table></figure><h3 id="3-8-在NAS上启动"><a href="#3-8-在NAS上启动" class="headerlink" title="3.8 在NAS上启动"></a>3.8 在NAS上启动</h3><p>使用docker-compose在NAS上启动容器。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">ddnsw:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&quot;weidajiao/ddnsw:latest&quot;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">&quot;ddnsw&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9090:9090&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config:/config</span></span><br></pre></td></tr></table></figure><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>本次主要是使用Kotlin、Vert.x框架实现了一个DDNS客户端，目的是为了NAS能在外网直连访问，顺便练练手，熟悉一下Kotlin和Vert.x。</p><p>到此目的已经达到，不过程序只是达到一个基本可用的状态，还有很多细节需要再琢磨琢磨。例如提供多种配置方式（环境变量&#x2F;命令参数等）、对接多个域名运营商、适配宿主机直接运行、内置多个IP获取接口做备用等等。</p><p>OK，本篇到此结束。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中的utf8、utf8mb4有什么区别</title>
      <link href="/2021/05/27/MySQL%E4%B8%AD%E7%9A%84utf8%E3%80%81utf8mb4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/05/27/MySQL%E4%B8%AD%E7%9A%84utf8%E3%80%81utf8mb4%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a>1. 背景</h3><p>在创建MySQL数据库时，需要指定数据库的字符集。MySQL支持的字符集非常多，在MySQL5.7中，默认字符集是latin1（不常用），在MySQL8.0中，默认字符集是utf8mb4。常用的还有一个utf8。那么这些字符集在MySQL中有什么区别呢？它们的应用场景分别是什么？</p><h3 id="2-Unicode"><a href="#2-Unicode" class="headerlink" title="2. Unicode"></a>2. Unicode</h3><p>说起字符集，肯定要提起Unicode编码。这是一种全球通用的字符编码。1990年开始研发，1994年正式发布1.0版本，2020年已经更新到13.0版本。</p><p>Unicode统一码，也叫万国码、单一码（Unicode），是计算机科学领域里的一项业界标准，包括字符集、编码方案等。Unicode 是为了解决传统的字符编码方案的局限而产生的，它为每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。</p><p>Unicode只是一组字符设定或者说是从数字和字符之间的逻辑映射的概念编码，但是它并没有指定代码点如何在计算机上存储。UCS4、UTF-8、UTF-16（UTF后的数字代表编码的最小单位，如UTF-8表示最小单位1字节（&#x3D;8 bits）,所以它可以使用1、2、3字节等进行编码，UTF-16表示最小单位2字节，所以它可以使用2、4字节进行编码）都是Unicode的编码方案。其中UTF-8因可以兼容ASCII而被广泛使用。</p><h3 id="3-MySQL中的utf8和utf8mb4"><a href="#3-MySQL中的utf8和utf8mb4" class="headerlink" title="3. MySQL中的utf8和utf8mb4"></a>3. MySQL中的utf8和utf8mb4</h3><p>明白了Unicode的基本设定后，MySQL中的utf8和utf8mb4就好理解了。</p><p>MySQL中<strong>utf8</strong>是utf8mb3的别称，它只支持最长3个字节UTF-8字符，即Unicode中的<strong>基本多文平面</strong>。在MySQL.5.5.3版本之后，新增了<strong>utf8mb4</strong>编码，它支持最长4个字节的UTF-8字符。mb的意思是most bytes，即最大字节数。</p><p>那为什么要出一个新的<strong>utf8mb4</strong>呢？</p><p>因为不够用了。<strong>utf8</strong>对于超过3个字节的字符是不能正常保存的，现在常见的emoji表情，和一些生僻汉字，都是占用4个字节。所以在在创建数据库时，编码应选择使用utf8mb4。由于utf8mb4是utf8的超集，所以几乎不用改动，可以从utf8平滑升级。</p><h3 id="4-排序规则"><a href="#4-排序规则" class="headerlink" title="4. 排序规则"></a>4. 排序规则</h3><p>utf8mb4最常用的两个排序规则是utf8mb4_unicode_ci、utf8mb4_general_ci。还有不常用的utf8mb4_bin、utf8mb4_0900_ci等。</p><h5 id="4-1-后缀"><a href="#4-1-后缀" class="headerlink" title="4.1 后缀"></a>4.1 后缀</h5><p>其中排序规则后缀有着不同的意义：</p><p><strong>ci</strong>代表case insensitive，意思是大小写不敏感，a与A会在字符判断中当做是一样的。</p><p><strong>bin</strong>代表二进制，a与A是会区别对待的。</p><p>举例说明，在下面的语句中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;JACK&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在utf8mb4_bin中，是匹配不到jack的。</p><p>在utf8mb4_general_ci中，是可以匹配到jack的。</p><h5 id="4-2-general和unicode"><a href="#4-2-general和unicode" class="headerlink" title="4.2 general和unicode"></a>4.2 general和unicode</h5><p><strong>utf8mb4_unicode_ci</strong>，支持Unicode校对规则算法（部分字符），并且支持扩展，速度慢。<strong>扩展</strong>即把一个字母看作与其他字母组合相等，例如在德语和一些其它语言中『ß』等于『ss』。</p><p><strong>utf8mb4_general_ci</strong>，不支持扩展，速度快。</p><p>对于中英文来说，它们没有很大的区别。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL优化之前缀索引</title>
      <link href="/2021/05/24/MySQL%E4%BC%98%E5%8C%96%E4%B9%8B%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95/"/>
      <url>/2021/05/24/MySQL%E4%BC%98%E5%8C%96%E4%B9%8B%E5%89%8D%E7%BC%80%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<h3 id="0-背景"><a href="#0-背景" class="headerlink" title="0. 背景"></a>0. 背景</h3><p>最近在研究上亿的数据在MySQL中如何优化存储时，偶然间看到一篇文章提到，对于优化索引大小可以采用<strong>前缀索引</strong>来减小索引体积。之前确实没有特别关注过<strong>前缀索引</strong>，于是便做了一些了解。</p><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h3><p>定义：当您为列创建二级索引时，MySQL会将列的值存储在单独的数据结构中，例如B-Tree和Hash。如果列是字符串列，则索引将占用大量磁盘空间并可能减慢<code>INSERT</code>操作速度。为解决此问题，MySQL允许您使用以下语法为字符串列的列值的前导部分创建索引。请注意，前缀支持和前缀长度（如果支持）取决于存储引擎。对于带<code>REDUNDANT</code>或<code>COMPACT</code>行格式的InnoDB表 ，最大前缀长度为767字节。但是，对于带有<code>DYNAMIC</code>或<code>COMPRESSED</code>行格式的InnoDB表 ，前缀长度为3,072字节。MyISAM表的前缀长度最多为1,000个字节。</p><p>说大白话，其实就是为字符串类型（包括二进制字符串类型）的值的前面N个字符或字节单独创建索引。针对的字段类型包括CHAR&#x2F;VARCHAR&#x2F;TEXT&#x2F;BINARY&#x2F;VARBINARY&#x2F;BLOB等。</p><h3 id="2-如何创建"><a href="#2-如何创建" class="headerlink" title="2. 如何创建"></a>2. 如何创建</h3><p>MySQL允许使用如下语法创建前缀索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">column_name(length) </span><br></pre></td></tr></table></figure><p>例如，为一个现有的数据表中，某一个字段创建前缀索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX index_name</span><br><span class="line"><span class="keyword">ON</span> table_name(column_name(length)); </span><br></pre></td></tr></table></figure><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3. 示例"></a>3. 示例</h3><p>假设我们有一张如下结构的数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `product`</span><br><span class="line">(</span><br><span class="line">    `id` INT AUTO_INCREMENT COMMENT &#x27;ID&#x27;,</span><br><span class="line">    `product_name` VARCHAR(200) NOT NULL COMMENT &#x27;商品名称&#x27;,</span><br><span class="line">    `product_image` VARCHAR(255) NULL COMMENT &#x27;商品图&#x27;,</span><br><span class="line">    `create_time` TIMESTAMP(3) DEFAULT CURRENT_TIMESTAMP(3) NOT NULL COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">    CONSTRAINT product_pk PRIMARY KEY (`id`)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">INSERT INTO `product` (product_name, product_image)</span><br><span class="line">VALUES (&#x27;蓝米手机0992857732&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝米手机13431243&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝米手机22324124&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝米手机33212156745&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝米手机45134135345&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝米手机56578763&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝米手机641236346&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝米手机7356436341&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝米手机814532543&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝钻手机11352577&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝钻手机277456342&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝钻手机3432567843&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝钻手机434236347&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝钻手机5234236856&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝钻手机614234322&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;蓝钻手机757909088&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;华威手机1870986&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;华威手机26759067&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;华威手机337653867990&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;华威手机43765867590&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;),</span><br><span class="line">       (&#x27;华威手机5375689796&#x27;, &#x27;https://www.baidu.com/img/PCfb_5bf082d29588c07f842ccde3f97243ea.png&#x27;);</span><br></pre></td></tr></table></figure><p>当我们需要查询『蓝米』开头的手机时，会写这样一个SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_name, product_image</span><br><span class="line"><span class="keyword">FROM</span> product</span><br><span class="line"><span class="keyword">WHERE</span> product_name <span class="keyword">LIKE</span> <span class="string">&#x27;蓝米%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>通过EXPLAIN分析得出结果为：</p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/05/31/image-20210527102352814.png" alt="image-20210527102352814" style="zoom:67%;" /><p>因为<strong>product_name</strong>没有索引，所以查询优化器必须扫描所有行才能返回结果。这时我们需要添加一个索引来优化查询效率。</p><p>我们的目的是保证列中值的唯一性最大化。那么如何找出最合适的前缀长度呢？使用以下语句尝试看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span>(<span class="keyword">LEFT</span>(product_name, <span class="number">5</span>)))</span><br><span class="line"><span class="keyword">FROM</span> `product`;</span><br></pre></td></tr></table></figure><p>经过多次尝试，前缀索引长度为5时，能实现唯一性的最大化。即前缀索引长度为5时，所有值都是唯一的。</p><p>这时我们创建前缀索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_product_name</span><br><span class="line">    <span class="keyword">ON</span> product (product_name(<span class="number">5</span>));</span><br></pre></td></tr></table></figure><p>再一次执行EXPLAIN分析查询语句，得到如下结果：</p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/05/31/image-20210527102236622.png" alt="image-20210527102236622" style="zoom:67%;" /><p>此时type已经为range级别了，rows显示9。我们的前缀索引就创建好了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EventStorming(事件风暴)</title>
      <link href="/2021/05/21/EventStorming%E4%BA%8B%E4%BB%B6%E9%A3%8E%E6%9A%B4/"/>
      <url>/2021/05/21/EventStorming%E4%BA%8B%E4%BB%B6%E9%A3%8E%E6%9A%B4/</url>
      
        <content type="html"><![CDATA[<p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/04/21/image-20210421104208638.png" alt="image-20210421104208638"></p><h3 id="什么是EventStorming（事件风暴）"><a href="#什么是EventStorming（事件风暴）" class="headerlink" title="什么是EventStorming（事件风暴）"></a>什么是EventStorming（事件风暴）</h3><p>EventStorming（事件风暴）是一种讨论会模式，旨在协同创建一个复杂的业务流程的模型。</p><p>现在，当很多人谈到DDD都会同时谈到EventStorming，甚至有人误认为这两个名词本身指代的就是同一个概念。</p><p>但其实这是两个完全独立的工具。</p><p>DDD是一套基于领域的分析和建模方法，而EventStorming则是一套Workshop（可以理解成一个类似于头脑风暴的工作坊）方法。DDD出现要比EventStorming早了10多年，而EventStorming的设计虽然参考了DDD的部分内容，但是并不是只为了DDD而设计的，是一套独立的通过协作基于事件还原系统全貌，从而快速分析复杂业务领域，完成领域建模的方法。</p><p>下图是对于EventStorming的一个清晰完整的概括。其完整的阐释了从系统外部与用户的交互，到系统内部的事件的传递，以及通过事件影响读模型从而给予用户动作的响应，从而完成一个完整闭环的过程。</p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/04/21/v2-af6d2f8f8e52f22eaaba7b776b3b74e4_1440w.jpg" alt="img"></p><h3 id="EventStorming（事件风暴）、DDD（领域驱动技术）还有Microservice（微服务）有什么关系？"><a href="#EventStorming（事件风暴）、DDD（领域驱动技术）还有Microservice（微服务）有什么关系？" class="headerlink" title="EventStorming（事件风暴）、DDD（领域驱动技术）还有Microservice（微服务）有什么关系？"></a>EventStorming（事件风暴）、DDD（领域驱动技术）还有Microservice（微服务）有什么关系？</h3><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/05/21/image-20210521170851052.png" alt="image-20210521170851052" style="zoom: 50%;" /><h3 id="什么时候需要使用EventStorming（事件风暴）？"><a href="#什么时候需要使用EventStorming（事件风暴）？" class="headerlink" title="什么时候需要使用EventStorming（事件风暴）？"></a>什么时候需要使用EventStorming（事件风暴）？</h3><ol><li>项目开始时，需求分析和知识共享</li><li>当开始一个较新的功能或应用的开发时</li></ol><h3 id="EventStorming（事件风暴）的优点？"><a href="#EventStorming（事件风暴）的优点？" class="headerlink" title="EventStorming（事件风暴）的优点？"></a>EventStorming（事件风暴）的优点？</h3><ul><li>这是一种有很强参与感的方法，每个人都拿着一叠便利贴和马克笔，随时可以加入学习和设计的讨论中，业务人员和开发人员在平等的基础上共同学习，我们所使用的语言都是被大家所理解的，而不是讨论业务人员无法理解的数据库，对象，类，等等概念；</li><li>它令每个人都聚焦于事件业务流程，而不是类和数据库；</li><li>这是一种高度视觉化的方法，消除了实验过程中的代码，让每个人平等的参与到设计过程中；</li><li>实施起来非常快，投入成本很低，只需花几个小时，而不用数周就差不多可以通过头脑风暴得出粗略的核心领域模型；</li><li>团队成员无一例外地会取得对业务理解的突破；</li><li>每个人都能学习到业务知识，无论是业务还是开发人员都会带着对现有模型的新鲜且清晰的理解离开讨论。在许多项目中，一部分甚至大多数项目成员根本不了解他们的工作内容，直到代码出现问题，才发现为时已晚。快速产出的模型能帮助每个人消除误解，朝着统一的方向和目标前进；</li><li>细粒度的事件为开发人员后续的研发提供了模型设计。</li></ul><h3 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h3><p>事件风暴将系统拆分为不同的元素，用不同颜色的即时贴表示，请参考下图对于不同颜色即时贴的解释:</p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/05/21/image-20210521171236776.png" alt="image-20210521171236776" style="zoom:50%;" /><ul><li><p>事件(Event): 事件风暴中的核心概念，它代表了某一个<strong>「业务行为」，描述的形似为宾语+动词的过去式</strong>。例如: 「订单被提交」，「账户被锁定」，「商品已被发出」。使用橙色的即时贴表示。</p></li><li><p>命令(Command): 既然有了事件必然有产生事件的对象，这就是命令。命令可以理解为是一个动作，执行了动作之后就会产生相应的事件。典型的动作描述可以是: 「取消订单」，「结账」等。使用深蓝色的即时贴表示。</p></li><li><p>用户(User 或 Actor): 同样的命令也是由对象执行的，这称之为用户。这里的用户一般是指自然人，例如一个电子购物网站的顾客。</p></li><li><p>聚合(Aggregate): 当一个完整的业务流程通过上述方式写完之后，对于每个用户，命令，事件进行组合，我们就能获得聚合了，用事件风暴的描述就是「用户在 XX 聚合对象上执行了 YY 命令，生成了 ZZ 事件」。例如「顾客在购物车对象上执行了结账命令，生成了购物车结算事件」。</p></li><li><p>规则(Policy): 当产生事件时，需要进行某些业务相关的规则校验，例如订单提交后需要检查库存是否充足，客户的支付交易是否成功等，诸如此类的业务规则可以使用粉色的即时贴表示。</p></li><li><p>读模型(Read Model) 与页面布局(Screen Layout): 事件产生后的另一个结果往往是呈现在用户面前的系统界面，在这里我们使用页面布局进行展示。这部分的工作一般由 UX 与业务人员完成，展现他们所需要的用户界面。同时页面布局上会展现用户所关心的数据，例如，当用户执行「结账」的命令之后，生成了「购物车结算」事件，此时呈现在用户面前的应该是商品明细信息和总金额。这样的数据我们使用读模型表示。</p></li><li><p>外部系统(System): 事件并不一定由命令产生，也可能由一个外部系统产生，例如一个第三方的支付系统会调用由你系统提供的回调接口，确认客户支付成功，由此产生一个「费用已支付」的事件。</p></li><li><p>问题(Question) 与假设(Assumption): 在讨论过程中各个参与人员可能会发生分歧，例如对于事件的定义，或是由哪个用户执行，或者是具体的规则是什么。此时如果无法在规定的 time box 之内达成统一意见(一般为 5 分钟)，可以将问题写在红色的即时贴上，作为问题，或是对某种情况的假设记录下来。</p></li></ul><h3 id="所以，EventStorm到底帮我们解决了什么问题？"><a href="#所以，EventStorm到底帮我们解决了什么问题？" class="headerlink" title="所以，EventStorm到底帮我们解决了什么问题？"></a>所以，EventStorm到底帮我们解决了什么问题？</h3><p>提供一种成型的方法和特定的模式，帮助开发人员，业务人员，UX，测试人员等项目参与者，对于业务流程有一个统一的认识，这包括关键的流程，核心的业务规则，系统不同模块的使用者。</p><p>另外，帮助开发人员梳理核心的业务对象。说白话对应到DDD中，最重要的就是以下两点。</p><ol><li>发现Aggregate(聚合)</li><li>发现Bounded Context(有界上下文)</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> DDD </tag>
            
            <tag> 领域驱动设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录：经常使用的JVM参数</title>
      <link href="/2021/04/27/%E8%AE%B0%E5%BD%95%EF%BC%9A%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84JVM%E5%8F%82%E6%95%B0/"/>
      <url>/2021/04/27/%E8%AE%B0%E5%BD%95%EF%BC%9A%E7%BB%8F%E5%B8%B8%E4%BD%BF%E7%94%A8%E7%9A%84JVM%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="1-将JDK动态代理生成的类保存为-class文件"><a href="#1-将JDK动态代理生成的类保存为-class文件" class="headerlink" title="1. 将JDK动态代理生成的类保存为 .class文件"></a>1. 将JDK动态代理生成的类保存为 .class文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djdk.proxy.ProxyGenerator.saveGeneratedFiles=true foo.jar</span><br></pre></td></tr></table></figure><h3 id="2-CMS垃圾回收器"><a href="#2-CMS垃圾回收器" class="headerlink" title="2. CMS垃圾回收器"></a>2. CMS垃圾回收器</h3><ul><li>Concurrent Mark Sweep 并发标记清除。</li><li>CMS的特点是垃圾回收线程和应用程序线程是并发执行的，相对于Stop The World来说，停顿时间较少。</li><li>使用的是标记清除算法，运作过程为四个步骤，分别是初始标记、并发标识、重新标记、并发清除。</li><li>因使用标记清除算法，故会产生内存空间碎片。又因内存空间是连续的，所以当空间足够、碎片较多时，不得已会进行FullGC。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-XX:+UseConcMarkSweepGC 激活CMS收集器</span><br><span class="line">-XX:+CMSParallelRemarkEnabled 并行运行最终标记阶段，加快最终标记的速度</span><br><span class="line">-XX:ConcGCThreads 设置CMS线程的数量</span><br><span class="line">-XX:+UseCMSInitiatingOccupancyOnly 只根据老年代使用比例来决定是否进行CMS</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction 设置触发CMS老年代回收的内存使用率占比</span><br><span class="line">-XX:+CMSParallelRemarkEnabled 并行运行最终标记阶段，加快最终标记的速度</span><br><span class="line">-XX:+UseCMSCompactAtFullCollection 每次触发CMS Full GC的时候都整理一次碎片</span><br><span class="line">-XX:CMSFullGCsBeforeCompaction=* 经过几次CMS Full GC的时候整理一次碎片</span><br><span class="line">-XX:+CMSClassUnloadingEnabled 让CMS可以收集永久带，默认不会收集</span><br><span class="line">-XX:+CMSScavengeBeforeRemark 最终标记之前强制进行一个Minor GC</span><br><span class="line">-XX:+ExplicitGCInvokesConcurrent 当调用System.gc()的时候，执行并行gc，只有在CMS或者G1下该参数才有效</span><br></pre></td></tr></table></figure><h3 id="3-调整内存"><a href="#3-调整内存" class="headerlink" title="3. 调整内存"></a>3. 调整内存</h3><p>-XX:NewRatio&#x3D;3</p><ul><li>调整老年代与新生代在整个堆中的占比。</li><li>默认值：2。即新生代与老年代的占比为1:2，新生代占1&#x2F;3，老年代占2&#x2F;3。</li><li>当设置为4时，即新生代与老年代的占比为1:4，新生代占1&#x2F;5，老年代占4&#x2F;5。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDD初识</title>
      <link href="/2021/04/20/DDD%E5%88%9D%E8%AF%86/"/>
      <url>/2021/04/20/DDD%E5%88%9D%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>Eric Evans的“Domain-Driven Design领域驱动设计”简称DDD，Evans DDD是一套综合软件系统分析和设计的面向对象建模方法，本站Jdon.com是国内公开最早讨论DDD网站之一，可订阅DDD专题。初学者学习DDD可从研究本站Jdon框架的DDD应用源码开始，戳这里开始。</p><p>过去系统分析和系统设计都是分离的，正如我们国家“系统分析师” 和“系统设计师” 两种职称考试一样，这样割裂的结果导致，需求分析的结果无法直接进行设计编程，而能够进行编程运行的代码却扭曲需求，导致客户运行软件后才发现很多功能不是自己想要的，而且软件不能快速跟随需求变化。</p><p>DDD则打破了这种隔阂，提出了领域模型概念，统一了分析和设计编程，使得软件能够更灵活快速跟随需求变化。见下面DDD与传统CRUD或过程脚本或者面向数据表等在开发效率上比较：</p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/04/20/image-20210420112614037.png" alt="image-20210420112614037" style="zoom: 50%;" /><p>服务器后端发展三个阶段：</p><ol><li>UI+DataBase的两层架构，这种面向数据库的架构(上图table module )没有灵活性。</li><li>UI+Service+DataBase的多层SOA架构，这种服务+表模型的架构易使服务变得囊肿，难于维护拓展，伸缩性能差，见<a href="http://www.jdon.com/45994">这里讨论</a>或<a href="http://www.jdon.com/45857"><strong>Spring Web 应用的最大败笔</strong></a>或<a href="https://www.jdon.com/54049">垂直切片的烟囱式故事已经一去不复返了</a></li><li>DDD+SOA微服务的事件驱动的<a href="https://www.jdon.com/cqrs.html">CQRS读写分离架构</a>，应付复杂业务逻辑，以聚合模型替代数据表模型，以并发的事件驱动替代串联的消息驱动。真正实现以业务实体为核心的灵活拓展。</li></ol><p>DDD革命性在于：领域模型准确反映了业务语言，而传统J2EE或Spring+Hibernate等事务性编程模型只关心数据，这些数据对象除了简单setter&#x2F;getter方法外，没有任何业务方法，被比喻成失血模型，那么领域模型这种带有业务方法的充血模型到底好在哪里？</p><p>以<a href="http://www.jdon.com/44815">比赛Match</a>为案例，比赛有“开始”和“结束”等业务行为，但是传统经典的方式是将“开始”和“结束”行为放在比赛的服务Service中，而不是放在比赛对象本身之中。我们不能因为用了计算机，用了数据库，用了框架，业务模型反而被技术框架给绑架，就像人虽然是由母亲生的，但是人的吃喝拉撒母亲不能替代，更不能以母爱名义肢解人的正常职责行为，如果是这样，这个人就是被母爱绑架了。</p><p>提倡充血模型，实际就是让过去被肢解被黑crack的业务模型回归正常，当然这也会被一些先入为主或被洗过脑的程序员看成反而不正常，这更是极大可悲之处。看到领域模型代码，就看到业务需求，没有翻译没有转换，保证软件真正实现“拷贝不走样”。</p><p>DDD最大的好处是：接触到需求第一步就是考虑领域模型，而不是将其切割成数据和行为，然后数据用数据库实现，行为使用服务实现，最后造成需求的首肢分离。DDD让你首先考虑的是业务语言，而不是数据。重点不同导致编程世界观不同。</p><p>DDD是解决复杂中大型软件的一套行之有效方式，在国外已经成为主流。DDD认为很多原因造成软件的复杂性，我们不可能避免这些复杂性，能做的是对复杂的问题进行控制。而一个好的领域模型是控制复杂问题的关键。领域模型的价值在于提供一种通用的语言，使得领域专家、产品经理和软件技术人员联系在一起，沟通无歧义。</p><p>DDD落地实现离不开<a href="https://www.jdon.com/tags/40250">Clean架构、六边形架构</a>、 <a href="http://www.jdon.com/tags/9958">CQRS、</a><a href="http://www.jdon.com/tags/17268">Event Source</a>几大大相关领域。下图是传统以数据库为中心的架构与使用DDD实现以领域为中心架构的区别。</p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/04/20/image-20210420112708228.png" alt="image-20210420112708228" style="zoom:50%;" /><h2 id="DDD专门为解决复杂性而诞生，因此解决思路完全不同于传统的CRUD，但是DDD本身掌握起来并不会感觉复杂，从程序员角度看，DDD其实是研究将包含业务逻辑的ifelse语句放在哪里的学问。"><a href="#DDD专门为解决复杂性而诞生，因此解决思路完全不同于传统的CRUD，但是DDD本身掌握起来并不会感觉复杂，从程序员角度看，DDD其实是研究将包含业务逻辑的ifelse语句放在哪里的学问。" class="headerlink" title="DDD专门为解决复杂性而诞生，因此解决思路完全不同于传统的CRUD，但是DDD本身掌握起来并不会感觉复杂，从程序员角度看，DDD其实是研究将包含业务逻辑的ifelse语句放在哪里的学问。　　"></a>DDD专门为解决复杂性而诞生，因此解决思路完全不同于传统的CRUD，但是DDD本身掌握起来并不会感觉复杂，从程序员角度看，DDD其实是研究将包含业务逻辑的ifelse语句放在哪里的学问。　　</h2><p>转自 [<a href="https://www.jdon.com/ddd.html">https://www.jdon.com/ddd.html</a>)</p><p>原标题：《领域驱动设计(DDD:Domain-Driven Design)》</p>]]></content>
      
      
      
        <tags>
            
            <tag> DDD </tag>
            
            <tag> 领域驱动设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch学习笔记2-基本使用</title>
      <link href="/2021/03/26/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/03/26/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1-实例背景"><a href="#1-实例背景" class="headerlink" title="1. 实例背景"></a>1. 实例背景</h3><p>目标：创建一个雇员目录</p><p>我们受雇于 <em>Megacorp</em> 公司，作为 HR 部门新的 <em>“热爱无人机”</em> （*”We love our drones!”*）激励项目的一部分，我们的任务是为此创建一个员工目录。该目录应当能培养员工认同感及支持实时、高效、动态协作，因此有一些业务需求：</p><ul><li>支持包含多值标签、数值、以及全文本的数据</li><li>检索任一员工的完整信息</li><li>允许结构化搜索，比如查询 30 岁以上的员工</li><li>允许简单的全文搜索以及较复杂的短语搜索</li><li>支持在匹配文档内容中高亮显示搜索片段</li><li>支持基于数据创建和管理分析仪表盘</li></ul><h3 id="2-索引文档"><a href="#2-索引文档" class="headerlink" title="2. 索引文档"></a>2. 索引文档</h3><p>添加三名员工信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">curl -X PUT <span class="string">&quot;localhost:9200/megacorp/employee/1?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; : &quot;John&quot;,</span><br><span class="line">    &quot;last_name&quot; :  &quot;Smith&quot;,</span><br><span class="line">    &quot;age&quot; :        25,</span><br><span class="line">    &quot;about&quot; :      &quot;I love to go rock climbing&quot;,</span><br><span class="line">    &quot;interests&quot;: [ &quot;sports&quot;, &quot;music&quot; ]</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="string">curl -X PUT &quot;localhost:9200/megacorp/employee/2?pretty&quot; -H &#x27;</span>Content-Type: application/json<span class="string">&#x27; -d&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; :  &quot;Jane&quot;,</span><br><span class="line">    &quot;last_name&quot; :   &quot;Smith&quot;,</span><br><span class="line">    &quot;age&quot; :         32,</span><br><span class="line">    &quot;about&quot; :       &quot;I like to collect rock albums&quot;,</span><br><span class="line">    &quot;interests&quot;:  [ &quot;music&quot; ]</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">curl -X PUT <span class="string">&quot;localhost:9200/megacorp/employee/3?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;first_name&quot; :  &quot;Douglas&quot;,</span><br><span class="line">    &quot;last_name&quot; :   &quot;Fir&quot;,</span><br><span class="line">    &quot;age&quot; :         35,</span><br><span class="line">    &quot;about&quot;:        &quot;I like to build cabinets&quot;,</span><br><span class="line">    &quot;interests&quot;:  [ &quot;forestry&quot; ]</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br></pre></td></tr></table></figure><h3 id="3-使用查询表达式搜索"><a href="#3-使用查询表达式搜索" class="headerlink" title="3. 使用查询表达式搜索"></a>3. 使用查询表达式搜索</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">curl -X GET <span class="string">&quot;localhost:9200/megacorp/employee/_search?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;last_name&quot; : &quot;Smith&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 3,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 2,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.4700036,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;megacorp&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;employee&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.4700036,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;first_name&quot; : &quot;John&quot;,</span><br><span class="line">          &quot;last_name&quot; : &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot; : 25,</span><br><span class="line">          &quot;about&quot; : &quot;I love to go rock climbing&quot;,</span><br><span class="line">          &quot;interests&quot; : [</span><br><span class="line">            &quot;sports&quot;,</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;megacorp&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;employee&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.4700036,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;first_name&quot; : &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot; : &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot; : 32,</span><br><span class="line">          &quot;about&quot; : &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot; : [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">curl -X GET <span class="string">&quot;localhost:9200/megacorp/employee/_search?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;bool&quot;: &#123;</span><br><span class="line">            &quot;must&quot;: &#123;</span><br><span class="line">                &quot;match&quot; : &#123;</span><br><span class="line">                    &quot;last_name&quot; : &quot;smith&quot; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;filter&quot;: &#123;</span><br><span class="line">                &quot;range&quot; : &#123;</span><br><span class="line">                    &quot;age&quot; : &#123; &quot;gt&quot; : 30 &#125; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;took&quot; : 13,</span><br><span class="line">  &quot;timed_out&quot; : false,</span><br><span class="line">  &quot;_shards&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : 1,</span><br><span class="line">    &quot;successful&quot; : 1,</span><br><span class="line">    &quot;skipped&quot; : 0,</span><br><span class="line">    &quot;failed&quot; : 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;hits&quot; : &#123;</span><br><span class="line">    &quot;total&quot; : &#123;</span><br><span class="line">      &quot;value&quot; : 1,</span><br><span class="line">      &quot;relation&quot; : &quot;eq&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;max_score&quot; : 0.4700036,</span><br><span class="line">    &quot;hits&quot; : [</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot; : &quot;megacorp&quot;,</span><br><span class="line">        &quot;_type&quot; : &quot;employee&quot;,</span><br><span class="line">        &quot;_id&quot; : &quot;2&quot;,</span><br><span class="line">        &quot;_score&quot; : 0.4700036,</span><br><span class="line">        &quot;_source&quot; : &#123;</span><br><span class="line">          &quot;first_name&quot; : &quot;Jane&quot;,</span><br><span class="line">          &quot;last_name&quot; : &quot;Smith&quot;,</span><br><span class="line">          &quot;age&quot; : 32,</span><br><span class="line">          &quot;about&quot; : &quot;I like to collect rock albums&quot;,</span><br><span class="line">          &quot;interests&quot; : [</span><br><span class="line">            &quot;music&quot;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-全文检索"><a href="#4-全文检索" class="headerlink" title="4. 全文检索"></a>4. 全文检索</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">curl -X GET <span class="string">&quot;localhost:9200/megacorp/employee/_search?pretty&quot;</span> -H <span class="string">&#x27;Content-Type: application/json&#x27;</span> -d<span class="string">&#x27;</span></span></span><br><span class="line">&#123;</span><br><span class="line">    &quot;query&quot; : &#123;</span><br><span class="line">        &quot;match&quot; : &#123;</span><br><span class="line">            &quot;about&quot; : &quot;rock climbing&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;took&quot;: 23,</span><br><span class="line">&quot;timed_out&quot;: false,</span><br><span class="line">&quot;_shards&quot;: &#123;</span><br><span class="line">&quot;total&quot;: 1,</span><br><span class="line">&quot;successful&quot;: 1,</span><br><span class="line">&quot;skipped&quot;: 0,</span><br><span class="line">&quot;failed&quot;: 0</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hits&quot;: &#123;</span><br><span class="line">&quot;total&quot;: &#123;</span><br><span class="line">&quot;value&quot;: 2,</span><br><span class="line">&quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;max_score&quot;: 1.4167401,</span><br><span class="line">&quot;hits&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;_index&quot;: &quot;megacorp&quot;,</span><br><span class="line">&quot;_type&quot;: &quot;employee&quot;,</span><br><span class="line">&quot;_id&quot;: &quot;1&quot;,</span><br><span class="line">&quot;_score&quot;: 1.4167401,</span><br><span class="line">&quot;_source&quot;: &#123;</span><br><span class="line">&quot;first_name&quot;: &quot;John&quot;,</span><br><span class="line">&quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">&quot;age&quot;: 25,</span><br><span class="line">&quot;about&quot;: &quot;I love to go rock climbing&quot;,</span><br><span class="line">&quot;interests&quot;: [</span><br><span class="line">&quot;sports&quot;,</span><br><span class="line">&quot;music&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;_index&quot;: &quot;megacorp&quot;,</span><br><span class="line">&quot;_type&quot;: &quot;employee&quot;,</span><br><span class="line">&quot;_id&quot;: &quot;2&quot;,</span><br><span class="line">&quot;_score&quot;: 0.4589591,</span><br><span class="line">&quot;_source&quot;: &#123;</span><br><span class="line">&quot;first_name&quot;: &quot;Jane&quot;,</span><br><span class="line">&quot;last_name&quot;: &quot;Smith&quot;,</span><br><span class="line">&quot;age&quot;: 32,</span><br><span class="line">&quot;about&quot;: &quot;I like to collect rock albums&quot;,</span><br><span class="line">&quot;interests&quot;: [</span><br><span class="line">&quot;music&quot;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-分析"><a href="#5-分析" class="headerlink" title="5. 分析"></a>5. 分析</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">我们为interests添加优化</span></span><br><span class="line">curl -X PUT &quot;localhost:9200/megacorp/_mapping?pretty&quot; -H &#x27;Content-Type: application/json&#x27; -d&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;properties&quot;: &#123;</span><br><span class="line">    &quot;interests&quot;: &#123; </span><br><span class="line">      &quot;type&quot;:     &quot;text&quot;,</span><br><span class="line">      &quot;fielddata&quot;: true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;acknowledged&quot;: true</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">挖掘出员工中最受欢迎的兴趣爱好</span></span><br><span class="line">curl -X GET &quot;localhost:9200/megacorp/employee/_search?pretty&quot; -H &#x27;Content-Type: application/json&#x27; -d&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;aggs&quot;: &#123;</span><br><span class="line">    &quot;all_interests&quot;: &#123;</span><br><span class="line">      &quot;terms&quot;: &#123; &quot;field&quot;: &quot;interests&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;took&quot;: 105,</span><br><span class="line">&quot;timed_out&quot;: false,</span><br><span class="line">&quot;_shards&quot;: &#123;</span><br><span class="line">&quot;total&quot;: 1,</span><br><span class="line">&quot;successful&quot;: 1,</span><br><span class="line">&quot;skipped&quot;: 0,</span><br><span class="line">&quot;failed&quot;: 0</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hits&quot;: &#123;</span><br><span class="line">&quot;total&quot;: &#123;</span><br><span class="line">&quot;value&quot;: 3,</span><br><span class="line">&quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;max_score&quot;: 1,</span><br><span class="line">&quot;hits&quot;: [...] #省略</span><br><span class="line">&#125;,</span><br><span class="line">&quot;aggregations&quot;: &#123;</span><br><span class="line">&quot;all_interests&quot;: &#123;</span><br><span class="line">&quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">&quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">&quot;buckets&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;key&quot;: &quot;music&quot;,</span><br><span class="line">&quot;doc_count&quot;: 2       #两个人喜欢音乐</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;key&quot;: &quot;forestry&quot;,</span><br><span class="line">&quot;doc_count&quot;: 1       #一个人喜欢林业</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;key&quot;: &quot;sports&quot;,</span><br><span class="line">&quot;doc_count&quot;: 1       #一个人喜欢运动</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询特定兴趣爱好员工的平均年龄</span></span><br><span class="line">curl -X GET &quot;localhost:9200/megacorp/employee/_search?pretty&quot; -H &#x27;Content-Type: application/json&#x27; -d&#x27;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;aggs&quot; : &#123;</span><br><span class="line">        &quot;all_interests&quot; : &#123;</span><br><span class="line">            &quot;terms&quot; : &#123; &quot;field&quot; : &quot;interests&quot; &#125;,</span><br><span class="line">            &quot;aggs&quot; : &#123;</span><br><span class="line">                &quot;avg_age&quot; : &#123;</span><br><span class="line">                    &quot;avg&quot; : &#123; &quot;field&quot; : &quot;age&quot; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x27;</span><br><span class="line">&#123;</span><br><span class="line">&quot;took&quot;: 24,</span><br><span class="line">&quot;timed_out&quot;: false,</span><br><span class="line">&quot;_shards&quot;: &#123;</span><br><span class="line">&quot;total&quot;: 1,</span><br><span class="line">&quot;successful&quot;: 1,</span><br><span class="line">&quot;skipped&quot;: 0,</span><br><span class="line">&quot;failed&quot;: 0</span><br><span class="line">&#125;,</span><br><span class="line">&quot;hits&quot;: &#123;</span><br><span class="line">&quot;total&quot;: &#123;</span><br><span class="line">&quot;value&quot;: 3,</span><br><span class="line">&quot;relation&quot;: &quot;eq&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;max_score&quot;: 1,</span><br><span class="line">&quot;hits&quot;: [...] #省略</span><br><span class="line">&#125;,</span><br><span class="line">&quot;aggregations&quot;: &#123;</span><br><span class="line">&quot;all_interests&quot;: &#123;</span><br><span class="line">&quot;doc_count_error_upper_bound&quot;: 0,</span><br><span class="line">&quot;sum_other_doc_count&quot;: 0,</span><br><span class="line">&quot;buckets&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;key&quot;: &quot;music&quot;,</span><br><span class="line">&quot;doc_count&quot;: 2,</span><br><span class="line">&quot;avg_age&quot;: &#123;</span><br><span class="line">&quot;value&quot;: 28.5</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;key&quot;: &quot;forestry&quot;,</span><br><span class="line">&quot;doc_count&quot;: 1,</span><br><span class="line">&quot;avg_age&quot;: &#123;</span><br><span class="line">&quot;value&quot;: 35</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;key&quot;: &quot;sports&quot;,</span><br><span class="line">&quot;doc_count&quot;: 1,</span><br><span class="line">&quot;avg_age&quot;: &#123;</span><br><span class="line">&quot;value&quot;: 25</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch学习笔记1-介绍及Docker部署</title>
      <link href="/2021/03/25/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E4%BB%8B%E7%BB%8D%E5%8F%8ADocker%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/03/25/ElasticSearch%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E4%BB%8B%E7%BB%8D%E5%8F%8ADocker%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>Elasticsearch 是一个开源的搜索引擎，建立在一个全文搜索引擎库 <a href="https://lucene.apache.org/core/">Apache Lucene™</a> 基础之上。 Lucene 可以说是当下最先进、高性能、全功能的搜索引擎库—无论是开源还是私有。</p><p>但是 Lucene 仅仅只是一个库。为了充分发挥其功能，你需要使用 Java 并将 Lucene 直接集成到应用程序中。 更糟糕的是，您可能需要获得信息检索学位才能了解其工作原理。Lucene <em>非常</em> 复杂。</p><p>Elasticsearch 也是使用 Java 编写的，它的内部使用 Lucene 做索引与搜索，但是它的目的是使全文检索变得简单， 通过隐藏 Lucene 的复杂性，取而代之的提供一套简单一致的 RESTful API。</p><p>然而，Elasticsearch 不仅仅是 Lucene，并且也不仅仅只是一个全文搜索引擎。 它可以被下面这样准确的形容：</p><ul><li>一个分布式的实时文档存储，<em>每个字段</em> 可以被索引与搜索</li><li>一个分布式实时分析搜索引擎</li><li>能胜任上百个服务节点的扩展，并支持 PB 级别的结构化或者非结构化数据</li></ul><p>Elasticsearch 将所有的功能打包成一个单独的服务，这样你可以通过程序与它提供的简单的 RESTful API 进行通信， 可以使用自己喜欢的编程语言充当 web 客户端，甚至可以使用命令行（去充当这个客户端）。</p><p>就 Elasticsearch 而言，起步很简单。对于初学者来说，它预设了一些适当的默认值，并隐藏了复杂的搜索理论知识。 它 <em>开箱即用</em> 。只需最少的理解，你很快就能具有生产力。</p><h3 id="2-在Docker中部署一个ElasticSearch单节点实例"><a href="#2-在Docker中部署一个ElasticSearch单节点实例" class="headerlink" title="2. 在Docker中部署一个ElasticSearch单节点实例"></a>2. 在Docker中部署一个ElasticSearch单节点实例</h3><p>接下来，我们需要在Docker中启动一个ElasticSearch单节点实例。方便我们学习。</p><h4 id="2-1-拉取镜像"><a href="#2-1-拉取镜像" class="headerlink" title="2.1 拉取镜像"></a>2.1 拉取镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据不同架构选择版本</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">amd64</span></span><br><span class="line">docker pull amd64/elasticsearch:7.11.2</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">arm64</span></span><br><span class="line">docker pull arm64v8/elasticsearch:7.11.2</span><br></pre></td></tr></table></figure><h4 id="2-2-编写docker-compose-yml"><a href="#2-2-编写docker-compose-yml" class="headerlink" title="2.2 编写docker-compose.yml"></a>2.2 编写docker-compose.yml</h4><ul><li>创建一个工作目录，用来存放持久化数据和docker-compose.yml文件。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/Docker/elasticsearch</span><br></pre></td></tr></table></figure><ul><li>创建docker-compose.yml</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/Docker/elasticsearch/docker-compose.yml</span><br></pre></td></tr></table></figure><ul><li>输入以下配置</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">arm64v8/elasticsearch:7.11.2</span>       <span class="comment">#指定使用的镜像</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span>             <span class="comment">#指定容器名称</span></span><br><span class="line">    <span class="attr">ports:</span>                                    <span class="comment">#映射端口</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;discovery.type=single-node&quot;</span>          <span class="comment">#设置单节点模式</span></span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/usr/share/elasticsearch/data</span>  <span class="comment">#挂载数据文件夹到宿主机</span></span><br></pre></td></tr></table></figure><h4 id="2-3-运行"><a href="#2-3-运行" class="headerlink" title="2.3 运行"></a>2.3 运行</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker compose up -d</span><br></pre></td></tr></table></figure><h4 id="2-4-查看启动正常"><a href="#2-4-查看启动正常" class="headerlink" title="2.4 查看启动正常"></a>2.4 查看启动正常</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">curl http://localhost:9200</span></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;d9fb9c159de4&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;docker-cluster&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;v8cYuynUT8iHZBQH-IjY9Q&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;7.11.2&quot;,</span><br><span class="line">    &quot;build_flavor&quot; : &quot;default&quot;,</span><br><span class="line">    &quot;build_type&quot; : &quot;docker&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;3e5a16cfec50876d20ea77b075070932c6464c7d&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2021-03-06T05:54:38.141101Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;8.7.0&quot;,</span><br><span class="line">    &quot;minimum_wire_compatibility_version&quot; : &quot;6.8.0&quot;,</span><br><span class="line">    &quot;minimum_index_compatibility_version&quot; : &quot;6.0.0-beta1&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-面向文档"><a href="#3-面向文档" class="headerlink" title="3. 面向文档"></a>3. 面向文档</h3><p>在应用程序中对象很少只是一个简单的键和值的列表。通常，它们拥有更复杂的数据结构，可能包括日期、地理信息、其他对象或者数组等。</p><p>也许有一天你想把这些对象存储在数据库中。使用关系型数据库的行和列存储，这相当于是把一个表现力丰富的对象塞到一个非常大的电子表格中：为了适应表结构，你必须设法将这个对象扁平化—通常一个字段对应一列—而且每次查询时又需要将其重新构造为对象。</p><p>Elasticsearch 是 <strong>面向文档</strong> 的，意味着它存储整个对象或 <strong>文档</strong>。Elasticsearch 不仅存储文档，而且 <strong>索引</strong> 每个文档的内容，使之可以被检索。在 Elasticsearch 中，我们对文档进行索引、检索、排序和过滤—而不是对行列数据。这是一种完全不同的思考数据的方式，也是 Elasticsearch 能支持复杂全文检索的原因。</p><p>Elasticsearch 使用 JavaScript Object Notation（或者 <a href="http://en.wikipedia.org/wiki/Json"><em>JSON</em></a>）作为文档的序列化格式。JSON 序列化为大多数编程语言所支持，并且已经成为 NoSQL 领域的标准格式。 它简单、简洁、易于阅读。</p><p>下面这个 JSON 文档代表了一个 user 对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;email&quot;</span>:      <span class="string">&quot;john@smith.com&quot;</span>,</span><br><span class="line">    <span class="string">&quot;first_name&quot;</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line">    <span class="string">&quot;last_name&quot;</span>:  <span class="string">&quot;Smith&quot;</span>,</span><br><span class="line">    <span class="string">&quot;info&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;bio&quot;</span>: <span class="string">&quot;Eco-warrior and defender of the weak&quot;</span>,</span><br><span class="line">        <span class="string">&quot;age&quot;</span>: <span class="number">25</span>,</span><br><span class="line">        <span class="string">&quot;interests&quot;</span>: [ <span class="string">&quot;dolphins&quot;</span>, <span class="string">&quot;whales&quot;</span> ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;join_date&quot;</span>: <span class="string">&quot;2014/05/01&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然原始的 <code>user</code> 对象很复杂，但这个对象的结构和含义在 JSON 版本中都得到了体现和保留。在 Elasticsearch 中将对象转化为 JSON 后构建索引要比在一个扁平的表结构中要简单的多。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRM概念-公海</title>
      <link href="/2021/03/19/CRM%E6%A6%82%E5%BF%B5-%E5%85%AC%E6%B5%B7/"/>
      <url>/2021/03/19/CRM%E6%A6%82%E5%BF%B5-%E5%85%AC%E6%B5%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><p>顾名思义，客户公海就是大家共享的客户，不是个人的，是大家都能看得到的，可以被领走也可以被分配的客户，我们平时在管理的数据库都是私海客户。</p><p>公海客户来源可以分为新进客户线索和系统原有客户线索。</p><p>当我们每天最关注的新的销售线索进入我们<strong>CRM客户数据库</strong>时，我们该如何分配，防止线索跟丢？</p><p>另外，有的销售人员只顾联系新线索客户，遗忘了这些躺尸很久的客户。这些客户都没用了吗？当然不是，据调查，盘活这些沉淀客户至少能给我们增加50%的业绩增长。那如何盘活这些客户呢？</p><p>如何做好新线索的分配和沉淀线索的管理，于是在<strong>CRM客户管理系统</strong>中我们引入了客户公海的概念。</p><p><strong>客户公海</strong>是企业管理客户线索的利器，当企业投入市场成本通过展会、线上推广、线下活动，快速获得一批客户，销售人员就需要协作一起攻克这批线索客户，当新线索变成老线索时，我们也要不断的变换策略逐一攻破，这才能让企业的市场成本最大化利用。</p><h3 id="2-对公海客户的控制策略"><a href="#2-对公海客户的控制策略" class="headerlink" title="2. 对公海客户的控制策略"></a>2. 对公海客户的控制策略</h3><h4 id="2-1-范围策略"><a href="#2-1-范围策略" class="headerlink" title="2.1 范围策略"></a>2.1 范围策略</h4><p>可以根据配置采用公司级公海和部门级公海，即掉下来的客户可以根据设定掉落在公司范围或部门范围，这个范围的人可见并作申领，或者增加按客户类型设定的权限级公海（如XX类型或XX行业的客户掉落后仅特定的业务员可见）。</p><h4 id="2-2-掉落策略"><a href="#2-2-掉落策略" class="headerlink" title="2.2 掉落策略"></a>2.2 掉落策略</h4><p>一般是有几重规则，如指定时间内未建跟踪记录、客户未产生明确意向、或者指定时间没有促成等，满足数据条件则自动掉落。这些规则可以相互组合成如：三个月没有走单，但此期间客户产生明确意向（参考CRM中的商机数据），那么在商机的预计成交时间内不掉落。或是三个月没有促成，但此期间有一个频率较高的跟踪接触（参考客户跟踪数据），也可以按阀值重新计算延长掉落时间。</p><p>至于掉落的时间限制，可以参考历史跟踪和订单记录，从众多客户初次跟踪的时间到最后成交时间得到一个客户平均开发周期，取值可以比这个稍大一点。</p><h4 id="2-3-分配和取舍"><a href="#2-3-分配和取舍" class="headerlink" title="2.3 分配和取舍"></a>2.3 分配和取舍</h4><p>通过给业务员设定客户拥有量上限，来让业务员对一些自己没有精力或没有把握的客户进行手动掉落。也可以为客户申领设计一个流程，让公海管理员（可以视作公司干预）既可以根据业务员提交的申领流程进行分配，也可以直接分配。</p><h4 id="2-4-提成"><a href="#2-4-提成" class="headerlink" title="2.4 提成"></a>2.4 提成</h4><p>如果是公海的客户，不同企业提成可能标准化也可能会有一些差异。可以为该客户设一个终身标识，表明其来自公海。在新增订单时选择客户后，可以通过客户的标识进行提成的差异化计算。这个体现在系统设计上，是需要系统有一个很灵活的佣金计算公式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> CRM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义注解实现自动注入BeanFactory</title>
      <link href="/2021/03/03/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5BeanFactory/"/>
      <url>/2021/03/03/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5BeanFactory/</url>
      
        <content type="html"><![CDATA[<h3 id="1-实现步骤"><a href="#1-实现步骤" class="headerlink" title="1. 实现步骤"></a>1. 实现步骤</h3><h4 id="1-1-写一个自定义注解"><a href="#1-1-写一个自定义注解" class="headerlink" title="1.1. 写一个自定义注解"></a>1.1. 写一个自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> WMapper &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-实现一个ImportBeanDefinitionRegistrar"><a href="#1-2-实现一个ImportBeanDefinitionRegistrar" class="headerlink" title="1.2. 实现一个ImportBeanDefinitionRegistrar"></a>1.2. 实现一个ImportBeanDefinitionRegistrar</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HelloImportBeanDefinitionRegister</span> <span class="keyword">implements</span> <span class="title class_">ImportBeanDefinitionRegistrar</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> &#123;</span><br><span class="line">            <span class="comment">//借助ClassPathBeanDefinitionScanner扫描类</span></span><br><span class="line">            <span class="type">ClassPathBeanDefinitionScanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathBeanDefinitionScanner</span>(registry, <span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//加入自定义注解</span></span><br><span class="line">            scanner.addIncludeFilter(<span class="keyword">new</span> <span class="title class_">AnnotationTypeFilter</span>(WMapper.class));</span><br><span class="line">            <span class="comment">//扫描指定包</span></span><br><span class="line">            scanner.scan(<span class="string">&quot;io.github.weiwenduo&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-3-配置类"><a href="#1-3-配置类" class="headerlink" title="1.3. 配置类"></a>1.3. 配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(HelloImportBeanDefinitionRegister.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-写一个类，加上我们的自定义注解"><a href="#1-4-写一个类，加上我们的自定义注解" class="headerlink" title="1.4. 写一个类，加上我们的自定义注解"></a>1.4. 写一个类，加上我们的自定义注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WMapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-写一个测试类试一下"><a href="#1-5-写一个测试类试一下" class="headerlink" title="1.5. 写一个测试类试一下"></a>1.5. 写一个测试类试一下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = SpringBasicApplication.class)</span></span><br><span class="line"><span class="meta">@ImportAutoConfiguration(&#123;HelloConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Case1Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> OtherService otherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Optional.ofNullable(otherService).ifPresentOrElse(</span><br><span class="line">                o -&gt; System.out.println(<span class="string">&quot;otherService注入成功&quot;</span>),</span><br><span class="line">                () -&gt; System.out.println(OtherService.class.getSimpleName() + <span class="string">&quot;为空，注入失败&quot;</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入如下结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2021</span>-<span class="number">03</span>-<span class="number">03</span> <span class="number">16</span>:<span class="number">06</span>:<span class="number">51.421</span>  INFO <span class="number">97481</span> --- [           main] i.g.w.spring.test.case1.Case1Test        : No active profile set, falling back to <span class="keyword">default</span> profiles: <span class="keyword">default</span></span><br><span class="line"><span class="number">2021</span>-<span class="number">03</span>-<span class="number">03</span> <span class="number">16</span>:<span class="number">06</span>:<span class="number">51.655</span>  INFO <span class="number">97481</span> --- [           main] i.g.w.spring.test.case1.Case1Test        : Started Case1Test in <span class="number">0.373</span> seconds (JVM running <span class="keyword">for</span> <span class="number">0.959</span>)</span><br><span class="line">otherService注入成功</span><br></pre></td></tr></table></figure><p>说明类已经加载到Bean容器中了。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存穿透、缓存击穿、缓存雪崩区别和解决方案</title>
      <link href="/2021/03/02/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2021/03/02/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E7%9A%84%E5%8C%BA%E5%88%AB%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h3 id="1-缓存处理流程"><a href="#1-缓存处理流程" class="headerlink" title="1. 缓存处理流程"></a>1. 缓存处理流程</h3><p>前台请求，后台先从缓存中取数据，取到直接返回结果，取不到时从数据库中取，数据库取到更新缓存，并返回结果，数据库也没取到，那直接返回空结果。 </p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/03/02/70.png"></p><h3 id="2-缓存穿透"><a href="#2-缓存穿透" class="headerlink" title="2. 缓存穿透"></a>2. 缓存穿透</h3><p>描述：</p><p>缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，如发起为id为“-1”的数据或id为特别大不存在的数据。这时的用户很可能是攻击者，攻击会导致数据库压力过大。</p><p>解决方案：</p><p>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;&#x3D;0的直接拦截；<br>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击</p><h3 id="3-缓存击穿"><a href="#3-缓存击穿" class="headerlink" title="3. 缓存击穿"></a>3. 缓存击穿</h3><p>描述：</p><p>缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力</p><p>解决方案：</p><p>设置热点数据永远不过期。<br>加互斥锁，互斥锁参考代码如下：</p><p>说明：</p><ol><li>缓存中有数据，直接走上述代码13行后就返回结果了 </li><li>缓存中没有数据，第1个进入的线程，获取锁并从数据库去取数据，没释放锁之前，其他并行进入的线程会等待100ms，再重新去缓存取数据。这样就防止都去数据库重复取数据，重复往缓存中更新数据情况出现。</li><li>当然这是简化处理，理论上如果能根据key值加锁就更好了，就是线程A从数据库取key1的数据并不妨碍线程B取key2的数据，上面代码明显做不到这点。</li></ol><h3 id="4-缓存雪崩"><a href="#4-缓存雪崩" class="headerlink" title="4. 缓存雪崩"></a>4. 缓存雪崩</h3><p>描述：</p><p>缓存雪崩是指缓存中数据大批量到过期时间，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，        缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><p>解决方案：</p><p>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。<br>如果缓存数据库是分布式部署，将热点数据均匀分布在不同搞得缓存数据库中。<br>设置热点数据永远不过期。</p><hr><p>版权声明：本文为CSDN博主「每天进步一点点yes」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/kongtiao5/article/details/82771694">https://blog.csdn.net/kongtiao5/article/details/82771694</a></p>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之布隆过滤器</title>
      <link href="/2021/03/02/%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2021/03/02/%E7%AE%97%E6%B3%95%E4%B9%8B%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>在程序的世界中，布隆过滤器是程序员的一把利器，利用它可以快速地解决项目中一些比较棘手的问题。如网页 URL 去重、垃圾邮件识别、大集合中重复元素的判断和缓存穿透等问题。</p><p>布隆过滤器（Bloom Filter）是 1970 年由布隆提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。<strong>它的优点是空间效率和查询时间都比一般的算法要好的多，缺点是有一定的误识别率和删除困难</strong>。</p><h3 id="一、布隆过滤器简介"><a href="#一、布隆过滤器简介" class="headerlink" title="一、布隆过滤器简介"></a>一、布隆过滤器简介</h3><p>当你往简单数组或列表中插入新数据时，将不会根据插入项的值来确定该插入项的索引值。这意味着新插入项的索引值与数据值之间没有直接关系。这样的话，当你需要在数组或列表中搜索相应值的时候，你必须遍历已有的集合。若集合中存在大量的数据，就会影响数据查找的效率。</p><p>针对这个问题，你可以考虑使用哈希表。<strong>利用哈希表你可以通过对 “值” 进行哈希处理来获得该值对应的键或索引值</strong>，然后把该值存放到列表中对应的索引位置。这意味着索引值是由插入项的值所确定的，当你需要判断列表中是否存在该值时，只需要对值进行哈希处理并在相应的索引位置进行搜索即可，这时的搜索速度是非常快的。</p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/03/02/v2-ba324df953f121b077f7bdc2a6109f0a_1440w.jpg" alt="img"></p><p>根据定义，布隆过滤器可以检查值是 <strong>“可能在集合中”</strong> 还是 <strong>“绝对不在集合中”</strong>。“可能” 表示有一定的概率，也就是说可能存在一定为误判率。那为什么会存在误判呢？下面我们来分析一下具体的原因。</p><p>布隆过滤器（Bloom Filter）本质上是由长度为 m 的位向量或位列表（仅包含 0 或 1 位值的列表）组成，最初所有的值均设置为 0，如下图所示。</p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/03/02/v2-3590d269c6cd9d5be764b4bc79335da5_1440w.jpg" alt="img"></p><p>为了将数据项添加到布隆过滤器中，我们会提供 K 个不同的哈希函数，并将结果位置上对应位的值置为 “1”。在前面所提到的哈希表中，我们使用的是单个哈希函数，因此只能输出单个索引值。而对于布隆过滤器来说，我们将使用多个哈希函数，这将会产生多个索引值。</p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/03/02/v2-8c28b1d5990396202a05430bde51511b_1440w.jpg" alt="img"></p><p>如上图所示，当输入 “semlinker” 时，预设的 3 个哈希函数将输出 2、4、6，我们把相应位置 1。假设另一个输入 ”kakuqo“，哈希函数输出 3、4 和 7。你可能已经注意到，索引位 4 已经被先前的 “semlinker” 标记了。此时，我们已经使用 “semlinker” 和 ”kakuqo“ 两个输入值，填充了位向量。当前位向量的标记状态为：</p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/03/02/v2-9cfe294a29af4209e476fccfae466d7d_1440w.jpg" alt="img"></p><p>当对值进行搜索时，与哈希表类似，我们将使用 3 个哈希函数对 ”搜索的值“ 进行哈希运算，并查看其生成的索引值。假设，当我们搜索 ”fullstack“ 时，3 个哈希函数输出的 3 个索引值分别是 2、3 和 7：</p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/03/02/v2-9a3dec489430cffd38b310c33242bf51_1440w.jpg" alt="img"></p><p>从上图可以看出，相应的索引位都被置为 1，这意味着我们可以说 ”fullstack“ 可能已经插入到集合中。事实上这是误报的情形，产生的原因是由于哈希碰撞导致的巧合而将不同的元素存储在相同的比特位上。幸运的是，布隆过滤器有一个可预测的误判率（FPP）：</p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/03/02/v2-af6d3aff3d1e50759226610d2c469b2b_1440w.jpg" alt="img"></p><ul><li>n 是已经添加元素的数量；</li><li>k 哈希的次数；</li><li>m 布隆过滤器的长度（如比特数组的大小）；</li></ul><p>极端情况下，当布隆过滤器没有空闲空间时（满），每一次查询都会返回 true 。这也就意味着 m 的选择取决于期望预计添加元素的数量 n ，并且 m 需要远远大于 n 。</p><p>实际情况中，布隆过滤器的长度 m 可以根据给定的误判率（FFP）的和期望添加的元素个数 n 的通过如下公式计算：</p><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2021/03/02/v2-19ddb2632e68e2666fd09e3c5441f542_1440w.jpg" alt="img"></p><p>了解完上述的内容之后，我们可以得出一个结论，<strong>当我们搜索一个值的时候，若该值经过 K 个哈希函数运算后的任何一个索引位为 ”0“，那么该值肯定不在集合中。但如果所有哈希索引值均为 ”1“，则只能说该搜索的值可能存在集合中</strong>。</p><h3 id="二、布隆过滤器应用"><a href="#二、布隆过滤器应用" class="headerlink" title="二、布隆过滤器应用"></a>二、布隆过滤器应用</h3><p>在实际工作中，布隆过滤器常见的应用场景如下：</p><ul><li>网页爬虫对 URL 去重，避免爬取相同的 URL 地址；</li><li>反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否垃圾邮箱；</li><li>Google Chrome 使用布隆过滤器识别恶意 URL；</li><li>Medium 使用布隆过滤器避免推荐给用户已经读过的文章；</li><li>Google BigTable，Apache HBbase 和 Apache Cassandra 使用布隆过滤器减少对不存在的行和列的查找。 除了上述的应用场景之外，布隆过滤器还有一个应用场景就是解决缓存穿透的问题。所谓的缓存穿透就是服务调用方每次都是查询不在缓存中的数据，这样每次服务调用都会到数据库中进行查询，如果这类请求比较多的话，就会导致数据库压力增大，这样缓存就失去了意义。</li></ul><p>利用布隆过滤器我们可以预先把数据查询的主键，比如用户 ID 或文章 ID 缓存到过滤器中。当根据 ID 进行数据查询的时候，我们先判断该 ID 是否存在，若存在的话，则进行下一步处理。若不存在的话，直接返回，这样就不会触发后续的数据库查询。需要注意的是缓存穿透不能完全解决，我们只能将其控制在一个可以容忍的范围内。</p><h3 id="三、布隆过滤器实战"><a href="#三、布隆过滤器实战" class="headerlink" title="三、布隆过滤器实战"></a>三、布隆过滤器实战</h3><p>布隆过滤器有很多实现和优化，由 Google 开发著名的 Guava 库就提供了布隆过滤器（Bloom Filter）的实现。在基于 Maven 的 Java 项目中要使用 Guava 提供的布隆过滤器，只需要引入以下坐标：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;guava&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;28.0-jre&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>在导入 Guava 库后，我们新建一个 BloomFilterDemo 类，在 main 方法中我们通过 BloomFilter.create 方法来创建一个布隆过滤器，接着我们初始化 1 百万条数据到过滤器中，然后在原有的基础上增加 10000 条数据并判断这些数据是否存在布隆过滤器中：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import com.google.common.base.Charsets;</span><br><span class="line">import com.google.common.hash.BloomFilter;</span><br><span class="line">import com.google.common.hash.Funnels;</span><br><span class="line"></span><br><span class="line">public class BloomFilterDemo &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        int total = 1000000; // 总数量</span><br><span class="line">        BloomFilter&lt;CharSequence&gt; bf = </span><br><span class="line">          BloomFilter.create(Funnels.stringFunnel(Charsets.UTF_8), total);</span><br><span class="line">        // 初始化 1000000 条数据到过滤器中</span><br><span class="line">        for (int i = 0; i &lt; total; i++) &#123;</span><br><span class="line">            bf.put(&quot;&quot; + i);</span><br><span class="line">        &#125;</span><br><span class="line">        // 判断值是否存在过滤器中</span><br><span class="line">        int count = 0;</span><br><span class="line">        for (int i = 0; i &lt; total + 10000; i++) &#123;</span><br><span class="line">            if (bf.mightContain(&quot;&quot; + i)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;已匹配数量 &quot; + count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当以上代码运行后，控制台会输出以下结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已匹配数量 1000309</span><br></pre></td></tr></table></figure><p>很明显以上的输出结果已经出现了误报，因为相比预期的结果多了 309 个元素，误判率为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">309/(1000000 + 10000) * 100 ≈ 0.030594059405940593</span><br></pre></td></tr></table></figure><p>如果要提高匹配精度的话，我们可以在创建布隆过滤器的时候设置误判率 fpp：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BloomFilter&lt;CharSequence&gt; bf = BloomFilter.create(</span><br><span class="line">  Funnels.stringFunnel(Charsets.UTF_8), total, 0.0002</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>在 BloomFilter 内部，误判率 fpp 的默认值是 0.03：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// com/google/common/hash/BloomFilter.class</span><br><span class="line">public static &lt;T&gt; BloomFilter&lt;T&gt; create(Funnel&lt;? super T&gt; funnel, long expectedInsertions) &#123;</span><br><span class="line">  return create(funnel, expectedInsertions, 0.03D);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在重新设置误判率为 0.0002 之后，我们重新运行程序，这时控制台会输出以下结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">已匹配数量 1000003</span><br></pre></td></tr></table></figure><p>通过观察以上的结果，可知误判率 fpp 的值越小，匹配的精度越高。当减少误判率 fpp 的值，需要的存储空间也越大，所以在实际使用过程中需要在误判率和存储空间之间做个权衡。</p><h3 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h3><p>本文主要介绍的布隆过滤器的概念和常见的应用场合，在实战部分我们演示了 Google 著名的 Guava 库所提供布隆过滤器（Bloom Filter）的基本使用，同时我们也介绍了布隆过滤器出现误报的原因及如何提高判断准确性。最后为了便于大家理解布隆过滤器，我们介绍了一个简易版的布隆过滤器 SimpleBloomFilter。</p><hr><p>转自知乎 <a href="https://zhuanlan.zhihu.com/p/94433082">https://zhuanlan.zhihu.com/p/94433082</a></p><p>原标题：《5 分钟搞懂布隆过滤器，亿级数据过滤算法你值得拥有！》</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven指定执行用JDK</title>
      <link href="/2021/02/08/Maven%E6%8C%87%E5%AE%9A%E6%89%A7%E8%A1%8C%E7%94%A8JDK/"/>
      <url>/2021/02/08/Maven%E6%8C%87%E5%AE%9A%E6%89%A7%E8%A1%8C%E7%94%A8JDK/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装要求"><a href="#1-安装要求" class="headerlink" title="1. 安装要求"></a>1. 安装要求</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/java/jdk-11.0.10+9/bin/java -Dmaven.multiModuleProjectDirectory=/app/jenkins_home/workspace/shendu-gateway -Dmaven.home=/app/maven -Dclassworlds.conf=/app/maven/bin/m2.conf -Dfile.encoding=UTF-8 -classpath /app/maven/boot/plexus-classworlds.license:/app/maven/boot/plexus-classworlds-2.6.0.jar org.codehaus.classworlds.Launcher clean package -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes部署</title>
      <link href="/2021/02/01/Kubernetes%E9%83%A8%E7%BD%B2/"/>
      <url>/2021/02/01/Kubernetes%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装要求"><a href="#1-安装要求" class="headerlink" title="1. 安装要求"></a>1. 安装要求</h3><ul><li>系统版本：CentOS 7.x</li><li>硬件配置：内存2GB以上、CPU2核以上、硬盘大于30G</li><li>集群网络配置：集群中所有服务器内网必须互通，并且需要访问外网来拉取镜像</li><li>禁用swap分区</li></ul><h3 id="2-安装前的准备工作"><a href="#2-安装前的准备工作" class="headerlink" title="2. 安装前的准备工作"></a>2. 安装前的准备工作</h3><ul><li><p>关闭防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl stop firewalld</span><br><span class="line">$ systemctl disable firewalld</span><br></pre></td></tr></table></figure></li><li><p>关闭selinux：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sed -i &#x27;s/enforcing/disabled/&#x27; /etc/selinux/config</span><br><span class="line">$ setenforce 0</span><br></pre></td></tr></table></figure></li><li><p>关闭swap分许<br>临时关闭：swapoff -a<br>永久关闭：注释掉&#x2F;etc&#x2F;fstab文件中的swap行</p></li><li><p>编辑hosts文件，将所有节点的ip和主机名一一对应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">172.16.17.10     kubernetes-master</span><br><span class="line">172.16.17.11     kubernetes-node-1</span><br><span class="line">172.16.17.12     kubernetes-node-2</span><br></pre></td></tr></table></figure></li><li><p>将桥接的IPv4流量传递到iptables的链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ cat &gt; /etc/sysctl.d/k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF </span><br><span class="line">$ sysctl --system</span><br></pre></td></tr></table></figure></li><li><p>开启IP转发功能</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure></li><li><p>NTP时间服务同步</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install ntpdate</span><br><span class="line">$ ntpdate -u ntp.api.bz</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-开始安装"><a href="#3-开始安装" class="headerlink" title="3. 开始安装"></a>3. 开始安装</h3><p>在所有节点上安装Docker&#x2F;kubeadm&#x2F;kubelet</p><h4 id="3-1-安装Docker"><a href="#3-1-安装Docker" class="headerlink" title="3.1 安装Docker"></a>3.1 安装Docker</h4><ol><li>安装必要的一些系统工具</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><ol start="2"><li>添加软件源信息<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li>更改仓库镜像地址<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &#x27;s+download.docker.com+mirrors.aliyun.com/docker-ce+&#x27; /etc/yum.repos.d/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li>更新并安装Docker-CE，这里我们安装19.03版本。其他安装Docker相关的选项请移步 <a href="https://developer.aliyun.com/mirror/docker-ce">https://developer.aliyun.com/mirror/docker-ce</a><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum makecache</span><br><span class="line">yum -y install docker-ce-19.03.14 docker-ce-cli-19.03.14 containerd.io</span><br></pre></td></tr></table></figure></li><li>开启Docker服务<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li><li>查看Docker是否安装成功<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@kubernetes-master ~]# docker version</span><br><span class="line">Client: Docker Engine - Community</span><br><span class="line"> Version:           19.03.14</span><br><span class="line"> API version:       1.40</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        5eb3275d40</span><br><span class="line"> Built:             Tue Dec  1 19:20:42 2020</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          19.03.14</span><br><span class="line">  API version:      1.40 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       5eb3275d40</span><br><span class="line">  Built:            Tue Dec  1 19:19:17 2020</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.3</span><br><span class="line">  GitCommit:        269548fa27e0089a8b8278fc4fc781d7f65a939b</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.0-rc92</span><br><span class="line">  GitCommit:        ff819c7e9184c13b7c2607fe6c30ae19403a7aff</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.18.0</span><br><span class="line">  GitCommit:        fec3683</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-用kubeadm部署Master"><a href="#4-用kubeadm部署Master" class="headerlink" title="4. 用kubeadm部署Master"></a>4. 用kubeadm部署Master</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">--apiserver-advertise-address=172.16.17.10 \</span><br><span class="line">--image-repository registry.aliyuncs.com/google_containers \</span><br><span class="line">--kubernetes-version v1.20.2 \</span><br><span class="line">--service-cidr=192.168.1.0/24 \</span><br><span class="line">--pod-network-cidr=192.168.200.0/24</span><br></pre></td></tr></table></figure><p>apiserver-advertise-address参数: master组件监听的api地址，这里写masterIP地址即可或者多网卡选择另一个IP地址<br>kubernetes-version: 指定安装的版本</p><h3 id="5-安装flannel"><a href="#5-安装flannel" class="headerlink" title="5. 安装flannel"></a>5. 安装flannel</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://gitee.com/mirrors/flannel/raw/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><h3 id="6-加入Node"><a href="#6-加入Node" class="headerlink" title="6. 加入Node"></a>6. 加入Node</h3><p>在Node节点上执行在kubeadm init输出的kubeadm join命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm join 172.16.17.10:6443 --token iz96vy.f5ukew9geeome5is --discovery-token-ca-cert-hash sha256:72b689426bfc34512294c29b39ea3b2af3a94e39f62c4434f3a49f16d51a1382</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux运维常用工具</title>
      <link href="/2021/02/01/Linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2021/02/01/Linux%E8%BF%90%E7%BB%B4%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h3 id="网络类"><a href="#网络类" class="headerlink" title="网络类"></a>网络类</h3><ol><li>ifconfig</li></ol><ul><li>依赖包 net-tools</li><li>常用命令<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></li></ul><h3 id="文件类"><a href="#文件类" class="headerlink" title="文件类"></a>文件类</h3><h3 id="用户权限类"><a href="#用户权限类" class="headerlink" title="用户权限类"></a>用户权限类</h3><ol><li>查看所有用户信息</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">cat</span> /etc/passwd</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用户名:密码:用户ID:组ID:备注:用户家目录:Shell命令</span></span><br><span class="line">admin:x:1024:100:System default user:/var/services/homes/admin:/bin/sh</span><br></pre></td></tr></table></figure><ol start="2"><li>查看当前用户名</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">whoami</span></span></span><br><span class="line">root</span><br></pre></td></tr></table></figure><ol start="3"><li>查询当前组</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">groups</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用户组名:用户组口令:UID:用户组包含的用户</span></span><br><span class="line">administrators:x:101:admin,abc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux的QA</title>
      <link href="/2021/02/01/Linux%E7%9A%84QA/"/>
      <url>/2021/02/01/Linux%E7%9A%84QA/</url>
      
        <content type="html"><![CDATA[<ol><li>host文件相关</li></ol><ul><li>hosts文件在&#x2F;etc&#x2F;hosts</li><li>修改完成后如何生效<ol><li>安装nscd  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install nscd</span><br></pre></td></tr></table></figure></li><li>清除DNS数据  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/nscd restart</span><br></pre></td></tr></table></figure></li><li>若无效，则清除DNS缓存  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/networking restart</span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="2"><li>安装CentOS后访问网络报错”network is unreachable”</li></ol><ul><li>编辑**&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts<strong>文件夹下的</strong>ifcfg-enxxx**文件</li><li>将ONBOOT属性改为yes</li><li>重启网络<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何获取泛型的Class对象</title>
      <link href="/2021/01/27/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9E%8B%E7%9A%84Class%E7%B1%BB%E5%9E%8B/"/>
      <url>/2021/01/27/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E6%B3%9B%E5%9E%8B%E7%9A%84Class%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="1-需求背景"><a href="#1-需求背景" class="headerlink" title="1. 需求背景"></a>1. 需求背景</h3><p>  我所做的项目中，使用了阿里云ONS作为消息中间件。在写Topic消费时，需要实现MessageListener的consume()方法，此方法中message参数的body成员变量是byte[]类型，因为项目约定使用json作为消息传递的序列化方式，故有想法通过模板方法，进行统一的byte[]到类对象的转换。在转换时遇到了问题，怎样获取到方法所在类上，泛型的实际类型。</p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取泛型的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Type <span class="title function_">getType</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取泛型的类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;T&gt; <span class="title function_">getTClass</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (Class&lt;T&gt;)((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-相关方法"><a href="#3-相关方法" class="headerlink" title="3. 相关方法"></a>3. 相关方法</h3><ul><li><p>java.lang.Class#getGenericSuperclass()</p><p>返回<code>Type</code>表示此所表示的实体（类，接口，基本类型或void）的直接超类<code>类</code> 。</p><p>如果超类是参数化类型，返回的<code>Type</code>对象必须准确反映源代码中使用的实际类型参数。 如果以前没有创建表示超类的参数化类型。 有关参数化类型创建过程的语义，请参见<code>ParameterizedType</code>的声明 。 如果这个<code>类</code>表示<code>Object</code>类，接口，原始类型或void，则返回null。 如果此对象表示数组类，则返回表示<code>Object</code>类的<code>类</code>对象。</p></li><li><p>java.lang.reflect.ParameterizedType#getActualTypeArguments()</p><p>返回一个表示此类型的实际类型参数的数组<code>Type</code>对象。</p><p>请注意，在某些情况下，返回的数组为空。 如果此类型表示嵌套在参数化类型中的非参数化类型，则可能会发生这种情况。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Netflix Zuul - 默认Filter</title>
      <link href="/2020/10/26/Spring%20Cloud%20Netflix%20Zuul%20-%20%E9%BB%98%E8%AE%A4Filter/"/>
      <url>/2020/10/26/Spring%20Cloud%20Netflix%20Zuul%20-%20%E9%BB%98%E8%AE%A4Filter/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud-Netflix-Zuul"><a href="#Spring-Cloud-Netflix-Zuul" class="headerlink" title="Spring Cloud Netflix Zuul"></a>Spring Cloud Netflix Zuul</h2><h3 id="1-FilterConstants"><a href="#1-FilterConstants" class="headerlink" title="1. FilterConstants"></a>1. FilterConstants</h3><p>在<strong>org.springframework.cloud.netflix.zuul.filters.support.FilterConstants</strong>中，可以看到Zuul定义了一些默认Filter的执行顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FilterConstants</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//省略...</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ORDER constants -----------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter Order for &#123;<span class="doctag">@link</span> DebugFilter#filterOrder()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEBUG_FILTER_ORDER</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter Order for</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.cloud.netflix.zuul.filters.pre.FormBodyWrapperFilter#filterOrder()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">FORM_BODY_WRAPPER_FILTER_ORDER</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter Order for</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.cloud.netflix.zuul.filters.pre.PreDecorationFilter&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">PRE_DECORATION_FILTER_ORDER</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter Order for</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.cloud.netflix.zuul.filters.route.RibbonRoutingFilter#filterOrder()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RIBBON_ROUTING_FILTER_ORDER</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter Order for</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.cloud.netflix.zuul.filters.post.SendErrorFilter#filterOrder()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SEND_ERROR_FILTER_ORDER</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter Order for &#123;<span class="doctag">@link</span> SendForwardFilter#filterOrder()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SEND_FORWARD_FILTER_ORDER</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter Order for</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.cloud.netflix.zuul.filters.post.SendResponseFilter#filterOrder()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SEND_RESPONSE_FILTER_ORDER</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Filter Order for</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.cloud.netflix.zuul.filters.route.SimpleHostRoutingFilter#filterOrder()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SIMPLE_HOST_ROUTING_FILTER_ORDER</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter order for &#123;<span class="doctag">@link</span> Servlet30WrapperFilter#filterOrder()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SERVLET_30_WRAPPER_FILTER_ORDER</span> <span class="operator">=</span> -<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * filter order for</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.cloud.netflix.zuul.filters.pre.ServletDetectionFilter#filterOrder()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SERVLET_DETECTION_FILTER_ORDER</span> <span class="operator">=</span> -<span class="number">3</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//省略...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-默认Filter"><a href="#2-默认Filter" class="headerlink" title="2. 默认Filter"></a>2. 默认Filter</h3><h4 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h4><ul><li>ServletDetectionFilter (-3)：检测请求是通过DispatcherServlet还是ZuulServlet 运行的.</li><li>Servlet30WrapperFilter(-2)：对Servlet3.0环境的包装器过滤</li><li>FormBodyWrapperFilter(-1)：为下游服务解析表单数据并重新编码.仅在content-type为application&#x2F;x-www-form-urlencoded或者multipart&#x2F;form-data时生效.</li><li>DebugFilter(1)：如果设置了“debug”请求参数，则将{@link RequestContext}调试属性设置为true</li><li>PreDecorationFilter(5)：根据提供的{@link RouteLocator}确定路由的位置和方式。 *还为下游请求设置各种代理相关的标头</li></ul><h4 id="route"><a href="#route" class="headerlink" title="route"></a>route</h4><ul><li>RibbonRoutingFilter(10)：使用Ribbon，Hystrix和可插入的http客户端发送请求。</li><li>SimpleHostRoutingFilter(100)：通过过apache http clients向预定的url发送请求.</li><li>SendForwardFilter(500)：使用requestDispatcher 转发请求.</li></ul><h4 id="post"><a href="#post" class="headerlink" title="post"></a>post</h4><ul><li>SendResponseFilter(1000)：将代理请求的响应写入当前响应。</li></ul><h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><ul><li>SendErrorFilter(0)：默认情况下转发到&#x2F;error路径,如果RequestContext.getThrowable()不是空。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Netflix Zuul - Filter的四个阶段</title>
      <link href="/2020/10/26/Spring%20Cloud%20Netflix%20Zuul%20-%20Filter%E7%9A%84%E5%9B%9B%E4%B8%AA%E9%98%B6%E6%AE%B5/"/>
      <url>/2020/10/26/Spring%20Cloud%20Netflix%20Zuul%20-%20Filter%E7%9A%84%E5%9B%9B%E4%B8%AA%E9%98%B6%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud-Netflix-Zuul"><a href="#Spring-Cloud-Netflix-Zuul" class="headerlink" title="Spring Cloud Netflix Zuul"></a>Spring Cloud Netflix Zuul</h2><h3 id="1-FilterConstants"><a href="#1-FilterConstants" class="headerlink" title="1. FilterConstants"></a>1. FilterConstants</h3><p>在<strong>org.springframework.cloud.netflix.zuul.filters.support.FilterConstants</strong>中，可以看到Zuul定义了Filter的类型（Type）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">FilterConstants</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//省略...</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Zuul Filter TYPE constants -----------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ZuulFilter#filterType()&#125; error type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ERROR_TYPE</span> <span class="operator">=</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ZuulFilter#filterType()&#125; post type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">POST_TYPE</span> <span class="operator">=</span> <span class="string">&quot;post&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ZuulFilter#filterType()&#125; pre type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PRE_TYPE</span> <span class="operator">=</span> <span class="string">&quot;pre&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ZuulFilter#filterType()&#125; route type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTE_TYPE</span> <span class="operator">=</span> <span class="string">&quot;route&quot;</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//省略...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ZuulServlet"><a href="#2-ZuulServlet" class="headerlink" title="2. ZuulServlet"></a>2. ZuulServlet</h3><p>在<strong>com.netflix.zuul.http.ZuulServlet</strong>中，可以看到不同类型的Filter的执行顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZuulServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(javax.servlet.ServletRequest servletRequest, javax.servlet.ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            init((HttpServletRequest) servletRequest, (HttpServletResponse) servletResponse);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Marks this request as having passed through the &quot;Zuul engine&quot;, as opposed to servlets</span></span><br><span class="line">            <span class="comment">// explicitly bound in web.xml, for which requests will not have the same data attached</span></span><br><span class="line">            <span class="type">RequestContext</span> <span class="variable">context</span> <span class="operator">=</span> RequestContext.getCurrentContext();</span><br><span class="line">            context.setZuulEngineRan();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                preRoute();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRoute();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                route();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                postRoute();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                postRoute();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ZuulException e) &#123;</span><br><span class="line">                error(e);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            error(<span class="keyword">new</span> <span class="title class_">ZuulException</span>(e, <span class="number">500</span>, <span class="string">&quot;UNHANDLED_EXCEPTION_&quot;</span> + e.getClass().getName()));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RequestContext.getCurrentContext().unset();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//省略...</span></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用JMeter简单测试接口并发</title>
      <link href="/2019/09/03/%E4%BD%BF%E7%94%A8JMeter%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%8F%91/"/>
      <url>/2019/09/03/%E4%BD%BF%E7%94%A8JMeter%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95%E6%8E%A5%E5%8F%A3%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>测试工具：Apache JMeter 5.1.1</p><h3 id="2-操作流程"><a href="#2-操作流程" class="headerlink" title="2. 操作流程"></a>2. 操作流程</h3><h4 id="2-1-创建线程组"><a href="#2-1-创建线程组" class="headerlink" title="2.1. 创建线程组"></a>2.1. 创建线程组</h4><img src="https://minioapi.wenduo.fun:26666/blog/img/2020/05/23/T0cEiB.png" alt="T0cEiB" style="zoom: 20%;" /><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2020/05/23/5E4342FD-F1A4-4D3B-A441-320F4ED2DFDD.png" alt="5E4342FD-F1A4-4D3B-A441-320F4ED2DFDD"></p><ul><li>线程数：同时请求的数量</li><li>Ramp-Up时间：线程之间间隔的时间</li><li>循环次数：该线程组循环运行的次数</li></ul><h4 id="2-2-添加HTTP请求"><a href="#2-2-添加HTTP请求" class="headerlink" title="2.2. 添加HTTP请求"></a>2.2. 添加HTTP请求</h4><img src="https://minioapi.wenduo.fun:26666/blog/img/2020/05/23/9E71A288-B9C8-4744-9A38-DEF4AA5866AA.png" alt="9E71A288-B9C8-4744-9A38-DEF4AA5866AA" style="zoom:40%;" /><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2020/05/23/5DFFB027-1824-4BF7-A6CA-5B1907EB457E.png" alt="5DFFB027-1824-4BF7-A6CA-5B1907EB457E"></p><h4 id="2-3-在『线程组』中添加『HTTP信息头管理器』"><a href="#2-3-在『线程组』中添加『HTTP信息头管理器』" class="headerlink" title="2.3. 在『线程组』中添加『HTTP信息头管理器』"></a>2.3. 在『线程组』中添加『HTTP信息头管理器』</h4><img src="https://minioapi.wenduo.fun:26666/blog/img/2020/05/23/DB706B5D-C37E-44FA-920C-52653B61B0C2.png" alt="DB706B5D-C37E-44FA-920C-52653B61B0C2" style="zoom:40%;" /><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2020/05/23/E3554723-82BB-4070-8832-7B4B2BD7234C.png" alt="E3554723-82BB-4070-8832-7B4B2BD7234C"></p><h4 id="2-4-添加『用表格查看结果』"><a href="#2-4-添加『用表格查看结果』" class="headerlink" title="2.4. 添加『用表格查看结果』"></a>2.4. 添加『用表格查看结果』</h4><img src="https://minioapi.wenduo.fun:26666/blog/img/2020/05/23/EF05095C-9F22-4F78-AB33-3CC6C31C81A8.png" alt="EF05095C-9F22-4F78-AB33-3CC6C31C81A8" style="zoom:44%;" /><h4 id="2-5-点击『启动』即可看到执行结果"><a href="#2-5-点击『启动』即可看到执行结果" class="headerlink" title="2.5. 点击『启动』即可看到执行结果"></a>2.5. 点击『启动』即可看到执行结果</h4><p><img src="https://minioapi.wenduo.fun:26666/blog/img/2020/05/23/54F3FFC5-64FB-4A41-A5D6-CAC806B7EE3B.png" alt="54F3FFC5-64FB-4A41-A5D6-CAC806B7EE3B"></p><h3 id="3-查看测试结果"><a href="#3-查看测试结果" class="headerlink" title="3. 查看测试结果"></a>3. 查看测试结果</h3><p>测试结果表格中中，各参数的意义如下：</p><ul><li>Sample：每个请求的序号</li><li>Start Time：每个请求开始时间</li><li>Thread Name：每个线程的名称</li><li>Label：Http请求名称</li><li>Sample Time：每个请求所花时间，单位毫秒</li><li>Status：请求状态，如果为勾则表示成功，如果为叉表示失败。</li><li>Bytes：请求的字节数</li></ul><p>在下面还有几个参数：</p><ul><li>样本数目：也就是上面所说的请求个数，成功的情况下等于你设定的并发数目乘以循环次数</li><li>平均：每个线程请求的平均时间</li><li>最新样本：表示服务器响应最后一个请求的时间</li><li>偏离：服务器响应时间变化、离散程度测量值的大小。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JMeter </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
